/* (c) https://github.com/MontiCore/monticore */

plugins {
  id 'java-library'
  id 'monticore' version '7.0.0' // MontiCore Plugin
  id 'com.github.johnrengelman.shadow' version "5.1.0"
}

group = "my.tagging"
version = '1.0.0-SNAPSHOT'

buildDir = file("$projectDir/target")
def grammarName = 'Tagging'
def outDir = "$buildDir/generated-sources/"

dependencies {
  implementation "de.monticore:monticore-runtime:$monticore_version"
  implementation "de.monticore:monticore-grammar:$monticore_version"
  implementation "de.monticore.lang:fd-lang:$fd_version"
  implementation "de.monticore.lang:fd-analysis:$fd_version"
  implementation project(":montithings.languages:mtconfig")
  implementation project(":montithings.languages:montithings")
  implementation "commons-cli:commons-cli:1.4"
  implementation 'com.google.code.gson:gson:2.8.9'
  implementation 'com.sparkjava:spark-core:2.3'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
  grammar "de.monticore:monticore-grammar:$monticore_version:grammars"
  implementation "de.se_rwth.commons:se-commons-utilities:$se_commons_version"
}

repositories {
  maven {
    url "https://nexus.se.rwth-aachen.de/content/groups/public"
  }
  mavenCentral()
}

// configure non-standard source sets
sourceSets {
  main.java.srcDirs += [outDir]
}

task generate(type: MCTask) {
  grammar = file "src/main/grammars/${grammarName}.mc4"
  outputDir = file outDir
  outputs.upToDateWhen { incCheck("${grammarName}.mc4") }
}

compileJava {
  dependsOn project.collect { it.tasks.withType(MCTask) }
}

// all in one deployment jar
shadowJar {
  manifest {
    attributes "Main-Class": "tagging.TaggingToolServer"
  }
  archiveFileName = "TaggingToolServer.${archiveExtension.get()}"
  archiveClassifier = "tagging-tool"
}

jar.dependsOn shadowJar


test {
  useJUnitPlatform()
}
