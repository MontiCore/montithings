% generated by template templates/query.ftl
:- include('facts').
:- include('helpers').


get_distribution_RoomTempSensor(RoomTempSensor) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched

    % all devices should be online
    include(property("state","online"),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % The following output lists have to be conjuncted
    include(property("has_hardware","sensor_temperature"),AllAvailableDevicesFiltered1,ConjunctionOutput1),
    include(property("location","building1"),AllAvailableDevicesFiltered1,ConjunctionOutput2),


    % Finally apply conjunction
    apply_conjunction([ConjunctionOutput1,ConjunctionOutput2],AllAvailableDevicesFiltered2),

    % apply distribution constraints
    % first constrains equal: ==

    % then constrains less than equal: =<
    include_lte(property("location", "building1"), 5, AllAvailableDevicesFiltered2,AllAvailableDevicesFiltered3),

    % then constrains greater than equal: >=
    check_gte(property("location", "building1_floor1"), 1, AllAvailableDevicesFiltered3),
    check_gte(property("location", "building1_floor2"), 1, AllAvailableDevicesFiltered3),
    check_gte(property("location", "building1_floor3"), 1, AllAvailableDevicesFiltered3),

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered3 = RoomTempSensor.

get_distribution_RoomTempController(RoomTempController) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched

    % all devices should be online
    include(property("state","online"),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % The following output lists have to be conjuncted
    include(property("has_hardware","heat_controller"),AllAvailableDevicesFiltered1,ConjunctionOutput1),
    include(property("location","building1"),AllAvailableDevicesFiltered1,ConjunctionOutput2),


    % Finally apply conjunction
    apply_conjunction([ConjunctionOutput1,ConjunctionOutput2],AllAvailableDevicesFiltered2),

    % apply distribution constraints
    % first constrains equal: ==
    include_equal(property("location", "building1_floor1"), 1, AllAvailableDevicesFiltered2,AllAvailableDevicesFiltered3),
    include_equal(property("location", "building1_floor2"), 1, AllAvailableDevicesFiltered3,AllAvailableDevicesFiltered4),
    include_equal(property("location", "building1_floor3"), 1, AllAvailableDevicesFiltered4,AllAvailableDevicesFiltered5),
    include_equal(property("location", "building1_room301"), 1, AllAvailableDevicesFiltered5,AllAvailableDevicesFiltered6),

    % then constrains less than equal: =<

    % then constrains greater than equal: >=

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered6 = RoomTempController.



get_distribution_allow_drop_RoomTempSensor(RoomTempSensor,Constraint1,Constraint2,Constraint3) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched

    % all devices should be online
    include(property("state","online"),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % The following output lists have to be conjuncted
    include(property("has_hardware","sensor_temperature"),AllAvailableDevicesFiltered1,ConjunctionOutput1),
    include(property("location","building1"),AllAvailableDevicesFiltered1,ConjunctionOutput2),


    % Finally apply conjunction
    apply_conjunction([ConjunctionOutput1,ConjunctionOutput2],AllAvailableDevicesFiltered2),

    % apply distribution constraints
    % first constrains equal: ==

    % then constrains less than equal: =<
    include_lte(property("location", "building1"), 5, AllAvailableDevicesFiltered2,AllAvailableDevicesFiltered3),

    % then constrains greater than equal: >=
        (
        check_gte(property("location", "building1_floor1"), 1, AllAvailableDevicesFiltered3), Constraint1 = '';
        (
        \+check_gte(property("location", "building1_floor1"), 1, _),
        check_gte(property("location", "building1_floor1"), 0, AllAvailableDevicesFiltered3),
        Constraint1 = 'RoomTempSensor location building1_floor1 >= 1 (0 would be satisfiable)'
        )
        ),
        (
        check_gte(property("location", "building1_floor2"), 1, AllAvailableDevicesFiltered3), Constraint2 = '';
        (
        \+check_gte(property("location", "building1_floor2"), 1, _),
        check_gte(property("location", "building1_floor2"), 0, AllAvailableDevicesFiltered3),
        Constraint2 = 'RoomTempSensor location building1_floor2 >= 1 (0 would be satisfiable)'
        )
        ),
        (
        check_gte(property("location", "building1_floor3"), 1, AllAvailableDevicesFiltered3), Constraint3 = '';
        (
        \+check_gte(property("location", "building1_floor3"), 1, _),
        check_gte(property("location", "building1_floor3"), 0, AllAvailableDevicesFiltered3),
        Constraint3 = 'RoomTempSensor location building1_floor3 >= 1 (0 would be satisfiable)'
        )
        ),

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered3 = RoomTempSensor.

get_distribution_allow_drop_RoomTempController(RoomTempController,Constraint1,Constraint2,Constraint3,Constraint4) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched

    % all devices should be online
    include(property("state","online"),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % The following output lists have to be conjuncted
    include(property("has_hardware","heat_controller"),AllAvailableDevicesFiltered1,ConjunctionOutput1),
    include(property("location","building1"),AllAvailableDevicesFiltered1,ConjunctionOutput2),


    % Finally apply conjunction
    apply_conjunction([ConjunctionOutput1,ConjunctionOutput2],AllAvailableDevicesFiltered2),

    % apply distribution constraints
    % first constrains equal: ==
        (
        include_equal(property("location", "building1_floor1"), 1, AllAvailableDevicesFiltered2,AllAvailableDevicesFiltered3), Constraint1 = '';
        (\+include_equal(property("location", "building1_floor1"), 1, AllAvailableDevicesFiltered2 , _), Constraint1 = 'RoomTempController location building1_floor1 == 1')
        ),
        (
        include_equal(property("location", "building1_floor2"), 1, AllAvailableDevicesFiltered3,AllAvailableDevicesFiltered4), Constraint2 = '';
        (\+include_equal(property("location", "building1_floor2"), 1, AllAvailableDevicesFiltered3 , _), Constraint2 = 'RoomTempController location building1_floor2 == 1')
        ),
        (
        include_equal(property("location", "building1_floor3"), 1, AllAvailableDevicesFiltered4,AllAvailableDevicesFiltered5), Constraint3 = '';
        (\+include_equal(property("location", "building1_floor3"), 1, AllAvailableDevicesFiltered4 , _), Constraint3 = 'RoomTempController location building1_floor3 == 1')
        ),
        (
        include_equal(property("location", "building1_room301"), 1, AllAvailableDevicesFiltered5,AllAvailableDevicesFiltered6), Constraint4 = '';
        (\+include_equal(property("location", "building1_room301"), 1, AllAvailableDevicesFiltered5 , _), Constraint4 = 'RoomTempController location building1_room301 == 1')
        ),

    % then constrains less than equal: =<

    % then constrains greater than equal: >=

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered6 = RoomTempController.



distribution(RoomTempSensor,RoomTempController) :-
    % retrieve possible lists of devices
    (get_distribution_RoomTempSensor(RoomTempSensor); (!, false) ),
    (get_distribution_RoomTempController(RoomTempController); (!, false) ),

    % apply incompatible checks
    check_incompatible(RoomTempSensor, RoomTempController),
    check_incompatible(RoomTempController, RoomTempSensor),

    % apply dependency checks
    check_dependency_distinct(RoomTempController,RoomTempSensor,1),
    check_dependency(RoomTempSensor,RoomTempController,1),
    % finishing query with a .
    1 == 1.

distribution_suggest(RoomTempSensor,RoomTempController) :-
    % retrieve possible lists of devices
    (get_distribution_allow_drop_RoomTempSensor(RoomTempSensor,Constraint1,Constraint2,Constraint3); (!, false) ),
    (get_distribution_allow_drop_RoomTempController(RoomTempController,Constraint4,Constraint5,Constraint6,Constraint7); (!, false) ),

    % apply incompatible checks
    (
    (check_incompatible(RoomTempSensor, RoomTempController), Constraint8 = ''); 
    (Constraint8 = 'Incompatibility between "RoomTempSensor" and "RoomTempController"')
    ),
    (
    (check_incompatible(RoomTempController, RoomTempSensor), Constraint9 = ''); 
    (Constraint9 = 'Incompatibility between "RoomTempController" and "RoomTempSensor"')
    ),

    % apply dependency checks
    (
        (
        check_dependency_distinct(RoomTempController,RoomTempSensor,1),
        Constraint10 = ''
        );
        (
        (
        check_dependency_distinct(RoomTempController,RoomTempSensor,0),
        Constraint10 = '"RoomTempController"" depends on at least 1 distinct instances of "RoomTempSensor" (0 would be satisfiable)'
        )
        )
    ),
    (
        (   
        check_dependency(RoomTempSensor,RoomTempController,1),
        Constraint11 = ''
        );
        (
        (
        check_dependency(RoomTempSensor,RoomTempController,0),
        Constraint11 = '"RoomTempSensor"" depends on at least 1 (possibly shared) instances of "RoomTempController" (0 would be satisfiable)'
        )
        )
    ),

    (Constraint1 == '' ;(\+(Constraint1 == ''), write('Dropped constraint: '), writeln(Constraint1))),
    (Constraint2 == '' ;(\+(Constraint2 == ''), write('Dropped constraint: '), writeln(Constraint2))),
    (Constraint3 == '' ;(\+(Constraint3 == ''), write('Dropped constraint: '), writeln(Constraint3))),
    (Constraint4 == '' ;(\+(Constraint4 == ''), write('Dropped constraint: '), writeln(Constraint4))),
    (Constraint5 == '' ;(\+(Constraint5 == ''), write('Dropped constraint: '), writeln(Constraint5))),
    (Constraint6 == '' ;(\+(Constraint6 == ''), write('Dropped constraint: '), writeln(Constraint6))),
    (Constraint7 == '' ;(\+(Constraint7 == ''), write('Dropped constraint: '), writeln(Constraint7))),
    (Constraint8 == '' ;(\+(Constraint8 == ''), write('Dropped constraint: '), writeln(Constraint8))),
    (Constraint9 == '' ;(\+(Constraint9 == ''), write('Dropped constraint: '), writeln(Constraint9))),
    (Constraint10 == '' ;(\+(Constraint10 == ''), write('Dropped constraint: '), writeln(Constraint10))),
    (Constraint11 == '' ;(\+(Constraint11 == ''), write('Dropped constraint: '), writeln(Constraint11))),

    % finishing query with a .
    1 == 1.

