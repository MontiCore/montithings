% generated by template templates/query.ftl
:- include('facts').
:- include('helpers').

get_distribution_Dtest_less_than_equal(Dtest_less_than_equal) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched
    include(property(state,online),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % apply distribution constraints
    % first constrains equal: ==

    % then constrains less than equal: =<
    include_lte(property(location, building1), 2, AllAvailableDevicesFiltered1,AllAvailableDevicesFiltered2),
    include_lte(property(location, building2), 3, AllAvailableDevicesFiltered2,AllAvailableDevicesFiltered3),
    include_lte(property(location, building3), 4, AllAvailableDevicesFiltered3,AllAvailableDevicesFiltered4),

    % then constrains greater than equal: >=

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered4 = Dtest_less_than_equal.

get_distribution_Dtest_greater_than_equal(Dtest_greater_than_equal) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched
    include(property(state,online),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % apply distribution constraints
    % first constrains equal: ==

    % then constrains less than equal: =<

    % then constrains greater than equal: >=
    check_gte(property(location, building1), 2, AllAvailableDevicesFiltered1),
    check_gte(property(location, building2), 3, AllAvailableDevicesFiltered1),
    check_gte(property(location, building3), 4, AllAvailableDevicesFiltered1),

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered1 = Dtest_greater_than_equal.

get_distribution_Dtest_equal(Dtest_equal) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched
    include(property(state,online),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % apply distribution constraints
    % first constrains equal: ==
    include_equal(property(location, building1), 2, AllAvailableDevicesFiltered1,AllAvailableDevicesFiltered2),
    include_equal(property(location, building2), 3, AllAvailableDevicesFiltered2,AllAvailableDevicesFiltered3),
    include_equal(property(location, building3), 4, AllAvailableDevicesFiltered3,AllAvailableDevicesFiltered4),

    % then constrains less than equal: =<

    % then constrains greater than equal: >=

    % then constrains that check all equal

    % bind result to target variable
    AllAvailableDevicesFiltered4 = Dtest_equal.

get_distribution_Dtest_all(Dtest_all) :-
    get_available_devices(AllAvailableDevices),

    % apply device properties that have to be matched
    include(property(state,online),AllAvailableDevices,AllAvailableDevicesFiltered1),

    % apply distribution constraints
    % first constrains equal: ==

    % then constrains less than equal: =<

    % then constrains greater than equal: >=

    % then constrains that check all equal
    check_include_all(property(location, building1), AllAvailableDevicesFiltered, AllAvailableDevicesFiltered1),

    % bind result to target variable
    AllAvailableDevicesFiltered1 = Dtest_all.


distribution(Dtest_less_than_equal,Dtest_greater_than_equal,Dtest_equal,Dtest_all) :-
    % retrieve possible lists of devices
    get_distribution_Dtest_less_than_equal(Dtest_less_than_equal),
    get_distribution_Dtest_greater_than_equal(Dtest_greater_than_equal),
    get_distribution_Dtest_equal(Dtest_equal),
    get_distribution_Dtest_all(Dtest_all),

    % apply incompatible checks

    % apply dependency checks
    % finishing query with a .
    1 == 1.
