/* (c) https://github.com/MontiCore/monticore */
plugins {
    id "java"
    id "monticore" // MontiCore Plugin
    id "maven-publish"
    id "com.github.johnrengelman.shadow"
//    id 'cz.malohlava.visteg' version '1.0.5'
}

group = "de.monticore.lang"
version = "0.0.1-SNAPSHOT"
description = "json"
sourceCompatibility = "1.8"

def emf_version = "2.15.0"
def mc_version  = "6.0.0"
def commons_version = "1.7.9"
def grammar_classifier = "grammars"
def grammarDir = "src/main/grammars"

// configure non-standard source sets
sourceSets {
    main.java.srcDirs += [ "$projectDir/target/generated-sources/monticore/sourcecode"]
}
buildDir = file("$projectDir/target")

configurations {grammar}

dependencies {
    implementation "org.eclipse.emf:org.eclipse.emf.ecore:$emf_version"
    implementation "org.eclipse.emf:org.eclipse.emf.ecore.xmi:$emf_version"
    implementation "org.eclipse.emf:org.eclipse.emf.common:$emf_version"
    implementation "de.monticore:monticore-runtime:$mc_version"
    implementation "de.monticore:monticore-emf-runtime:$mc_version"
    implementation "de.monticore:monticore-grammar:$mc_version"
    grammar "de.monticore:monticore-grammar:$mc_version:$grammar_classifier"
    implementation "de.se_rwth.commons:se-commons-logging:$commons_version"
    implementation "de.se_rwth.commons:se-commons-utilities:$commons_version"
    implementation "com.google.guava:guava:23.0"
    implementation "org.antlr:antlr4-runtime:4.7.1"
    implementation "net.sourceforge.plantuml:plantuml:1.2018.12"
    implementation "com.google.code.findbugs:jsr305:3.0.0"
    implementation "ch.qos.logback:logback-classic:1.1.7"
    testImplementation "junit:junit:4.11"
    testImplementation "de.monticore:monticore-runtime:$mc_version:tests"
    testImplementation "de.monticore:monticore-runtime:$mc_version"
}

// execute MC
task  generateJSON (type: MCTask) {
    grammar = file "$projectDir/$grammarDir/de/monticore/lang/JSON.mc4"
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath file("$projectDir/src/main/java")
    def uptoDate = incCheck(outputDir.toString() +"/de/monticore/lang/json/IncGenGradleCheck.txt")
    outputs.upToDateWhen { uptoDate }
}

compileJava.dependsOn(generateJSON)

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// build sources jar in addition
task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

// build javadoc jar in addition
task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier =  "javadoc"
}
// generated java doc contains errors, disable for now
javadoc.failOnError(false)

// shadowJar { // all in one jar
//    manifest {
//        attributes "Main-Class": "de.monticore.umlcd4a.CD4ACLI"
//    }
//    archiveClassifier =  "cli"
// }

// build grammar jar as well
task grammarJar(type: Jar) {
    from ("$projectDir/src/main/grammars/"){ include "**/*.mc4" }
    archiveClassifier = "grammars"
}

// configure deployment
publishing {
    // configure what artifacts to publish
    publications {
        mavenJava(MavenPublication) {
            artifactId = "$project.name"
            from components.java
            artifact sourcesJar
            artifact javadocJar
            artifact shadowJar
            artifact grammarJar
        }
    }
    repositories.maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        def releasesRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-releases/"
        def snapshotsRepoUrl = "https://nexus.se.rwth-aachen.de/content/repositories/monticore-snapshots/"
        url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
    }
}

repositories {
    maven {
        credentials.username mavenUser
        credentials.password mavenPassword
        url repo
    }
}
