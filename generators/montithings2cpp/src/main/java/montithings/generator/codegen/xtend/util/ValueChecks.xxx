# (c) https://github.com/MontiCore/monticore
<#--package montithings.generator.codegen.xtend.util

import montithings.generator.helper.ComponentHelper
import arcbasis._symboltable.ComponentTypeSymbol
import arcbasis._symboltable.PortSymbol
import de.se_rwth.commons.logging.Log
import montithings._ast.ASTPort
import montithings._ast.ASTMTValueList
import montithings._ast.ASTMTValueRange
import montithings._ast.ASTMTValueFormat
import montiarc._symboltable.PortSymbol-->

class ValueCheck {


	def static String printPortValuecheck(ComponentSymbol component, PortSymbol port) {
	    if (!port.getAstNode().isPresent()) {
	      Log.warn("0xMT011 Port " + port.getName() + " has no AST Node in symbol.")
	      return ""
	    }
	    if (!(port.getAstNode().get() instanceof ASTPort)) {
	      Log.info("0xMT012 Port " + port.getName() + " is no MT Port. No value checks generated.",
	          "printPortValuecheck")
	      return ""
	    }
	    <#assign mtPort = port.getAstNode().get() as ASTPort>
	    if (!mtPort.isPresentAllowedValues()) {
	      return ""
	    }
	    <#assign valueContainer = "">
	    if (port.isIncoming) { valueContainer = "input" }
	    else { valueContainer = "result" }

		return '''
		{
		<#list mtPort.getMTPortDeclarationList as decl>
			<#assign portValue = valueContainer + ".get" + decl.name.toFirstUpper + " ().value ()">
			<#if !component.isBatchPort(port)>
				${formatCheckPreparation(portValue)}
				if (${valueContainer}.get${decl.name.toFirstUpper} () && !(
			${ELSE}
				<#assign helper = new ComponentHelper(component)>
				std::vector<${helper.getRealPortCppTypeString(port)}> copy${decl.name.toFirstUpper} = input.get${decl.name.toFirstUpper} ();
				for_each(copy${decl.name.toFirstUpper}.begin (), copy${decl.name.toFirstUpper}.end (), [](${helper.getRealPortCppTypeString(port)}& v)
				{
					${formatCheckPreparation(portValue = 'v')}
					if  (!(
			</#if>
			<#if mtPort.allowedValues instanceof ASTMTValueList>
				<#assign list = mtPort.allowedValues as ASTMTValueList>
				${valueListToString(portValue, list, valueContainer)}
			${ELSEIF mtPort.allowedValues instanceof ASTMTValueRange}
				<#assign range = mtPort.allowedValues as ASTMTValueRange>
				${valueRangeToString(portValue, range, valueContainer)}
			${ELSEIF mtPort.allowedValues instanceof ASTMTValueFormat}
				<#assign format = mtPort.allowedValues as ASTMTValueFormat>
				<#if component.isBatchPort(port)>
 ${formatCheckToString("allowedValuesCheck.str ()", format)}
 <#else>
 ${formatCheckToString(portValue, format)}
  </#if>
			</#if>
			)) {
			<#if decl.isPresentDefault>
				<#if component.isBatchPort(port)>
					v = ${valuationToString(decl.getDefault())};
				${ELSEIF valueContainer.equals("result")}
					${valueContainer}.set${decl.name.toFirstUpper}(${valuationToString(decl.getDefault())});
				${ELSEIF valueContainer.equals("input")}
					${valueContainer}.add${decl.name.toFirstUpper}Element(${valuationToString(decl.getDefault())});
				</#if>
			${ELSE}
				std::ostringstream error;
				error << "Violated allowed values for port \"${decl.name}\". Actual value: ";
				<#if component.isBatchPort(port)>
 error << v;
 <#else>
 error << ${valueContainer}.get${decl.name.toFirstUpper} ().value ();
  </#if>
				throw std::runtime_error(error.str ());
			</#if>
			}
			<#if component.isBatchPort(port)>
			});
			input.set${decl.name.toFirstUpper}(copy${decl.name.toFirstUpper});
			</#if>
		</#list>
		}
		'''
	}

	def private static String formatCheckPreparation(String port) {
    	return '''
    	std::ostringstream allowedValuesCheck;
    	allowedValuesCheck << ${port};'''
  	}

	def private static String formatCheckToString(String port, ASTMTValueFormat format) {
    	return '''std::regex_match(allowedValuesCheck.str(), std::regex("${format.format}"))'''
	}

	def private static String valueRangeToString(String port, ASTMTValueRange range, String valueContainer) {
	    <#assign lowerBound = valuationToString(range.getLowerBound());>
	    <#assign upperBound = valuationToString(range.getUpperBound());>

		return '''
		${port} >= ${lowerBound} &&
		<#if range.isPresentStepsize>
 ((${port} - ${lowerBound}) % ${valuationToString(range.stepsize)} == 0) &&
 </#if>
		${port} <= ${upperBound}
		'''
  	}

  	def private static String valueListToString(String port, ASTMTValueList list, String valueContainer) {
		<#assign ranges = list.getMTValueRangeList();>
		<#assign valuations = list.getValuationList();>
		return '''
		<#list valuations as v >
 port} == ${valuationToString(v)<#sep>||</#sep>
 </#list>
		<#if !valuations.isEmpty && !ranges.isEmpty>
 ||
 </#if>
		<#list ranges as r >
 (${valueRangeToString(port, r, valueContainer)})<#sep>||</#sep>
 </#list>
		'''
	}

	def private static String valuationToString(ASTValuation valuation) {
		return Utils.printExpression(valuation.expression);
	}
}
