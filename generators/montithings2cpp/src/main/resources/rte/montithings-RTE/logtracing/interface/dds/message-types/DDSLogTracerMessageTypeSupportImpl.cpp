/* Generated by /home/luke/Projects/OpenDDS/bin/opendds_idl version 3.15 (ACE version 6.2a_p19) running on input file /home/luke/Projects/montithings/core/generators/montithings2cpp/src/main/resources/rte/montithings-RTE/logtracing/interface/dds/message-types/DDSLogTracerMessage.idl */
#include "DDSLogTracerMessageTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSLogTracerMessage */



/* Begin ENUM: RequestData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const DDSLogTracerMessage::RequestData& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, DDSLogTracerMessage::RequestData& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<DDSLogTracerMessage::RequestData>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSLogTracerMessage::RequestData& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  switch (value) {
  case DDSLogTracerMessage::LOG_ENTRIES:
    value_writer.write_enum("LOG_ENTRIES", DDSLogTracerMessage::LOG_ENTRIES);
    break;
  case DDSLogTracerMessage::INTERNAL_DATA:
    value_writer.write_enum("INTERNAL_DATA", DDSLogTracerMessage::INTERNAL_DATA);
    break;
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_DDSLogTracerMessage_RequestData_names[] = {
  "LOG_ENTRIES",
  "INTERNAL_DATA"
};
const size_t gen_DDSLogTracerMessage_RequestData_names_size = 2;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: RequestData */


/* Begin STRUCT: Request */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSLogTracerMessage::Request& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.target_instance.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.req_uuid.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.log_uuid.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.input_uuid.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.output_uuid.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.from_timestamp);
  find_size_ulong(size, padding);
}

bool operator<<(Serializer& strm, const DDSLogTracerMessage::Request& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.target_instance.in())
    && (strm << stru.req_uuid.in())
    && (strm << stru.log_uuid.in())
    && (strm << stru.input_uuid.in())
    && (strm << stru.output_uuid.in())
    && (strm << stru.from_timestamp)
    && (strm << stru.req_data);
}

bool operator>>(Serializer& strm, DDSLogTracerMessage::Request& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.target_instance.out())
    && (strm >> stru.req_uuid.out())
    && (strm >> stru.log_uuid.out())
    && (strm >> stru.input_uuid.out())
    && (strm >> stru.output_uuid.out())
    && (strm >> stru.from_timestamp)
    && (strm >> stru.req_data);
}

size_t gen_max_marshaled_size(const DDSLogTracerMessage::Request& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSLogTracerMessage::Request> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSLogTracerMessage::Request> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.target_instance.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const DDSLogTracerMessage::Request> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.target_instance.in());
}

bool operator>>(Serializer& strm, KeyOnly<DDSLogTracerMessage::Request> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.target_instance.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSLogTracerMessage::Request& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_field("target_instance");
  value_writer.write_string(value.target_instance);
  value_writer.end_field();
  value_writer.begin_field("req_uuid");
  value_writer.write_string(value.req_uuid);
  value_writer.end_field();
  value_writer.begin_field("log_uuid");
  value_writer.write_string(value.log_uuid);
  value_writer.end_field();
  value_writer.begin_field("input_uuid");
  value_writer.write_string(value.input_uuid);
  value_writer.end_field();
  value_writer.begin_field("output_uuid");
  value_writer.write_string(value.output_uuid);
  value_writer.end_field();
  value_writer.begin_field("from_timestamp");
  value_writer.write_int32(value.from_timestamp);
  value_writer.end_field();
  value_writer.begin_field("req_data");
  vwrite(value_writer, value.req_data);
  value_writer.end_field();
  value_writer.end_struct();
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSLogTracerMessage {
::DDS::DataWriter_ptr RequestTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Request> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr RequestTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Request> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr RequestTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Request> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Request, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& RequestTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Request>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool RequestTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* RequestTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

RequestTypeSupport::_ptr_type RequestTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSLogTracerMessage::Request> : MetaStruct {
  typedef DDSLogTracerMessage::Request T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 1; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "target_instance")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSLogTracerMessage::Request& typed = *static_cast<const DDSLogTracerMessage::Request*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "target_instance") == 0) {
      return typed.target_instance.in();
    }
    if (std::strcmp(field, "req_uuid") == 0) {
      return typed.req_uuid.in();
    }
    if (std::strcmp(field, "log_uuid") == 0) {
      return typed.log_uuid.in();
    }
    if (std::strcmp(field, "input_uuid") == 0) {
      return typed.input_uuid.in();
    }
    if (std::strcmp(field, "output_uuid") == 0) {
      return typed.output_uuid.in();
    }
    if (std::strcmp(field, "from_timestamp") == 0) {
      return typed.from_timestamp;
    }
    if (std::strcmp(field, "req_data") == 0) {
      return gen_DDSLogTracerMessage_RequestData_names[typed.req_data];
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Request)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "target_instance") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'target_instance' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'target_instance' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'target_instance' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "req_uuid") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'req_uuid' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'req_uuid' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'req_uuid' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "log_uuid") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'log_uuid' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'log_uuid' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'log_uuid' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "input_uuid") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'input_uuid' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'input_uuid' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'input_uuid' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "output_uuid") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'output_uuid' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'output_uuid' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'output_uuid' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "from_timestamp") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'from_timestamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'from_timestamp' could not be skipped");
      }
    }
    if (std::strcmp(field, "req_data") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'req_data' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'req_data' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSLogTracerMessage::Request");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "target_instance") == 0) {
      return make_field_cmp(&T::target_instance, next);
    }
    if (std::strcmp(field, "req_uuid") == 0) {
      return make_field_cmp(&T::req_uuid, next);
    }
    if (std::strcmp(field, "log_uuid") == 0) {
      return make_field_cmp(&T::log_uuid, next);
    }
    if (std::strcmp(field, "input_uuid") == 0) {
      return make_field_cmp(&T::input_uuid, next);
    }
    if (std::strcmp(field, "output_uuid") == 0) {
      return make_field_cmp(&T::output_uuid, next);
    }
    if (std::strcmp(field, "from_timestamp") == 0) {
      return make_field_cmp(&T::from_timestamp, next);
    }
    if (std::strcmp(field, "req_data") == 0) {
      return make_field_cmp(&T::req_data, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Request)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"target_instance", "req_uuid", "log_uuid", "input_uuid", "output_uuid", "from_timestamp", "req_data", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "target_instance") == 0) {
      return &static_cast<const T*>(stru)->target_instance;
    }
    if (std::strcmp(field, "req_uuid") == 0) {
      return &static_cast<const T*>(stru)->req_uuid;
    }
    if (std::strcmp(field, "log_uuid") == 0) {
      return &static_cast<const T*>(stru)->log_uuid;
    }
    if (std::strcmp(field, "input_uuid") == 0) {
      return &static_cast<const T*>(stru)->input_uuid;
    }
    if (std::strcmp(field, "output_uuid") == 0) {
      return &static_cast<const T*>(stru)->output_uuid;
    }
    if (std::strcmp(field, "from_timestamp") == 0) {
      return &static_cast<const T*>(stru)->from_timestamp;
    }
    if (std::strcmp(field, "req_data") == 0) {
      return &static_cast<const T*>(stru)->req_data;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Request)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "target_instance") == 0) {
      static_cast<T*>(lhs)->target_instance = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "req_uuid") == 0) {
      static_cast<T*>(lhs)->req_uuid = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "log_uuid") == 0) {
      static_cast<T*>(lhs)->log_uuid = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "input_uuid") == 0) {
      static_cast<T*>(lhs)->input_uuid = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "output_uuid") == 0) {
      static_cast<T*>(lhs)->output_uuid = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "from_timestamp") == 0) {
      static_cast<T*>(lhs)->from_timestamp = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "req_data") == 0) {
      static_cast<T*>(lhs)->req_data = *static_cast<const DDSLogTracerMessage::RequestData*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Request)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "target_instance") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->target_instance.in(), static_cast<const T*>(rhs)->target_instance.in());
    }
    if (std::strcmp(field, "req_uuid") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->req_uuid.in(), static_cast<const T*>(rhs)->req_uuid.in());
    }
    if (std::strcmp(field, "log_uuid") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->log_uuid.in(), static_cast<const T*>(rhs)->log_uuid.in());
    }
    if (std::strcmp(field, "input_uuid") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->input_uuid.in(), static_cast<const T*>(rhs)->input_uuid.in());
    }
    if (std::strcmp(field, "output_uuid") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->output_uuid.in(), static_cast<const T*>(rhs)->output_uuid.in());
    }
    if (std::strcmp(field, "from_timestamp") == 0) {
      return static_cast<const T*>(lhs)->from_timestamp == static_cast<const T*>(rhs)->from_timestamp;
    }
    if (std::strcmp(field, "req_data") == 0) {
      return static_cast<const T*>(lhs)->req_data == static_cast<const T*>(rhs)->req_data;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Request)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSLogTracerMessage::Request>()
{
  static MetaStructImpl<DDSLogTracerMessage::Request> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, DDSLogTracerMessage::Request*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSLogTracerMessage::Request>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Request */


/* Begin STRUCT: Response */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSLogTracerMessage::Response& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.req_uuid.in()) + 1;
  find_size_ulong(size, padding);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.content.in()) + 1;
}

bool operator<<(Serializer& strm, const DDSLogTracerMessage::Response& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.req_uuid.in())
    && (strm << stru.req_data)
    && (strm << stru.content.in());
}

bool operator>>(Serializer& strm, DDSLogTracerMessage::Response& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.req_uuid.out())
    && (strm >> stru.req_data)
    && (strm >> stru.content.out());
}

size_t gen_max_marshaled_size(const DDSLogTracerMessage::Response& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSLogTracerMessage::Response> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSLogTracerMessage::Response> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
}

bool operator<<(Serializer& strm, KeyOnly<const DDSLogTracerMessage::Response> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

bool operator>>(Serializer& strm, KeyOnly<DDSLogTracerMessage::Response> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSLogTracerMessage::Response& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_field("req_uuid");
  value_writer.write_string(value.req_uuid);
  value_writer.end_field();
  value_writer.begin_field("req_data");
  vwrite(value_writer, value.req_data);
  value_writer.end_field();
  value_writer.begin_field("content");
  value_writer.write_string(value.content);
  value_writer.end_field();
  value_writer.end_struct();
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSLogTracerMessage {
::DDS::DataWriter_ptr ResponseTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Response> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr ResponseTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Response> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr ResponseTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Response> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Response, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& ResponseTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Response>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool ResponseTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* ResponseTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

ResponseTypeSupport::_ptr_type ResponseTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSLogTracerMessage::Response> : MetaStruct {
  typedef DDSLogTracerMessage::Response T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    ACE_UNUSED_ARG(field);
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSLogTracerMessage::Response& typed = *static_cast<const DDSLogTracerMessage::Response*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "req_uuid") == 0) {
      return typed.req_uuid.in();
    }
    if (std::strcmp(field, "req_data") == 0) {
      return gen_DDSLogTracerMessage_RequestData_names[typed.req_data];
    }
    if (std::strcmp(field, "content") == 0) {
      return typed.content.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Response)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "req_uuid") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'req_uuid' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'req_uuid' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'req_uuid' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "req_data") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'req_data' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'req_data' could not be skipped");
      }
    }
    if (std::strcmp(field, "content") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'content' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'content' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'content' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSLogTracerMessage::Response");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "req_uuid") == 0) {
      return make_field_cmp(&T::req_uuid, next);
    }
    if (std::strcmp(field, "req_data") == 0) {
      return make_field_cmp(&T::req_data, next);
    }
    if (std::strcmp(field, "content") == 0) {
      return make_field_cmp(&T::content, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Response)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"req_uuid", "req_data", "content", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "req_uuid") == 0) {
      return &static_cast<const T*>(stru)->req_uuid;
    }
    if (std::strcmp(field, "req_data") == 0) {
      return &static_cast<const T*>(stru)->req_data;
    }
    if (std::strcmp(field, "content") == 0) {
      return &static_cast<const T*>(stru)->content;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Response)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "req_uuid") == 0) {
      static_cast<T*>(lhs)->req_uuid = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "req_data") == 0) {
      static_cast<T*>(lhs)->req_data = *static_cast<const DDSLogTracerMessage::RequestData*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "content") == 0) {
      static_cast<T*>(lhs)->content = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Response)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "req_uuid") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->req_uuid.in(), static_cast<const T*>(rhs)->req_uuid.in());
    }
    if (std::strcmp(field, "req_data") == 0) {
      return static_cast<const T*>(lhs)->req_data == static_cast<const T*>(rhs)->req_data;
    }
    if (std::strcmp(field, "content") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->content.in(), static_cast<const T*>(rhs)->content.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSLogTracerMessage::Response)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSLogTracerMessage::Response>()
{
  static MetaStructImpl<DDSLogTracerMessage::Response> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, DDSLogTracerMessage::Response*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSLogTracerMessage::Response>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Response */

/* End MODULE: DDSLogTracerMessage */
