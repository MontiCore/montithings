/* Generated by /home/luke/Projects/OpenDDS/bin/opendds_idl version 3.15 (ACE version 6.2a_p19) running on input file /home/luke/Projects/montithings/core/generators/montithings2cpp/src/main/resources/rte/montithings-RTE/dds/message-types/DDSRecorderMessage.idl */
#include "DDSRecorderMessageTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/BuiltInTopicUtils.h"
#include "dds/DCPS/ContentFilteredTopicImpl.h"
#include "dds/DCPS/DataReaderImpl_T.h"
#include "dds/DCPS/DataWriterImpl_T.h"
#include "dds/DCPS/FilterEvaluator.h"
#include "dds/DCPS/MultiTopicDataReader_T.h"
#include "dds/DCPS/PoolAllocator.h"
#include "dds/DCPS/PublicationInstance.h"
#include "dds/DCPS/PublisherImpl.h"
#include "dds/DCPS/Qos_Helper.h"
#include "dds/DCPS/RakeData.h"
#include "dds/DCPS/RakeResults_T.h"
#include "dds/DCPS/ReceivedDataElementList.h"
#include "dds/DCPS/Registered_Data_Types.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/SubscriberImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/debug.h"
#include "dds/DdsDcpsDomainC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: DDSRecorderMessage */



/* Begin ENUM: MessageType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const DDSRecorderMessage::MessageType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, DDSRecorderMessage::MessageType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<DDSRecorderMessage::MessageType>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSRecorderMessage::MessageType& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  switch (value) {
  case DDSRecorderMessage::MESSAGE_RECORD:
    value_writer.write_enum("MESSAGE_RECORD", DDSRecorderMessage::MESSAGE_RECORD);
    break;
  case DDSRecorderMessage::INTERNAL_RECORDS:
    value_writer.write_enum("INTERNAL_RECORDS", DDSRecorderMessage::INTERNAL_RECORDS);
    break;
  case DDSRecorderMessage::INTERNAL_STATE:
    value_writer.write_enum("INTERNAL_STATE", DDSRecorderMessage::INTERNAL_STATE);
    break;
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_DDSRecorderMessage_MessageType_names[] = {
  "MESSAGE_RECORD",
  "INTERNAL_RECORDS",
  "INTERNAL_STATE"
};
const size_t gen_DDSRecorderMessage_MessageType_names_size = 3;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: MessageType */


/* Begin STRUCT: Message */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSRecorderMessage::Message& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.instance_name.in()) + 1;
  find_size_ulong(size, padding);
  if ((size + padding) % 8) {
    padding += 8 - ((size + padding) % 8);
  }
  size += gen_max_marshaled_size(stru.timestamp);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.serialized_vector_clock.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.topic.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.msg_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.msg_content.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.message_delays.in()) + 1;
}

bool operator<<(Serializer& strm, const DDSRecorderMessage::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.instance_name.in())
    && (strm << stru.type)
    && (strm << stru.timestamp)
    && (strm << stru.serialized_vector_clock.in())
    && (strm << stru.topic.in())
    && (strm << stru.msg_id)
    && (strm << stru.msg_content.in())
    && (strm << stru.message_delays.in());
}

bool operator>>(Serializer& strm, DDSRecorderMessage::Message& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.instance_name.out())
    && (strm >> stru.type)
    && (strm >> stru.timestamp)
    && (strm >> stru.serialized_vector_clock.out())
    && (strm >> stru.topic.out())
    && (strm >> stru.msg_id)
    && (strm >> stru.msg_content.out())
    && (strm >> stru.message_delays.out());
}

size_t gen_max_marshaled_size(const DDSRecorderMessage::Message& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSRecorderMessage::Message> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSRecorderMessage::Message> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.instance_name.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const DDSRecorderMessage::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.id)
    && (strm << stru.t.instance_name.in());
}

bool operator>>(Serializer& strm, KeyOnly<DDSRecorderMessage::Message> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.id)
    && (strm >> stru.t.instance_name.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSRecorderMessage::Message& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_field("id");
  value_writer.write_int32(value.id);
  value_writer.end_field();
  value_writer.begin_field("instance_name");
  value_writer.write_string(value.instance_name);
  value_writer.end_field();
  value_writer.begin_field("type");
  vwrite(value_writer, value.type);
  value_writer.end_field();
  value_writer.begin_field("timestamp");
  value_writer.write_int64(value.timestamp);
  value_writer.end_field();
  value_writer.begin_field("serialized_vector_clock");
  value_writer.write_string(value.serialized_vector_clock);
  value_writer.end_field();
  value_writer.begin_field("topic");
  value_writer.write_string(value.topic);
  value_writer.end_field();
  value_writer.begin_field("msg_id");
  value_writer.write_int32(value.msg_id);
  value_writer.end_field();
  value_writer.begin_field("msg_content");
  value_writer.write_string(value.msg_content);
  value_writer.end_field();
  value_writer.begin_field("message_delays");
  value_writer.write_string(value.message_delays);
  value_writer.end_field();
  value_writer.end_struct();
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSRecorderMessage {
::DDS::DataWriter_ptr MessageTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Message> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr MessageTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr MessageTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Message> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Message, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& MessageTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Message>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool MessageTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* MessageTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

MessageTypeSupport::_ptr_type MessageTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSRecorderMessage::Message> : MetaStruct {
  typedef DDSRecorderMessage::Message T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "id")) {
      return true;
    }
    if (!ACE_OS::strcmp(field, "instance_name")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSRecorderMessage::Message& typed = *static_cast<const DDSRecorderMessage::Message*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return typed.instance_name.in();
    }
    if (std::strcmp(field, "type") == 0) {
      return gen_DDSRecorderMessage_MessageType_names[typed.type];
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return typed.timestamp;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return typed.serialized_vector_clock.in();
    }
    if (std::strcmp(field, "topic") == 0) {
      return typed.topic.in();
    }
    if (std::strcmp(field, "msg_id") == 0) {
      return typed.msg_id;
    }
    if (std::strcmp(field, "msg_content") == 0) {
      return typed.msg_content.in();
    }
    if (std::strcmp(field, "message_delays") == 0) {
      return typed.message_delays.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Message)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (std::strcmp(field, "instance_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'instance_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'instance_name' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'instance_name' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "type") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'type' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'type' could not be skipped");
      }
    }
    if (std::strcmp(field, "timestamp") == 0) {
      ACE_CDR::LongLong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'timestamp' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 8)) {
        throw std::runtime_error("Field 'timestamp' could not be skipped");
      }
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'serialized_vector_clock' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'serialized_vector_clock' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'serialized_vector_clock' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "topic") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'topic' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'topic' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'topic' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "msg_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'msg_id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'msg_id' could not be skipped");
      }
    }
    if (std::strcmp(field, "msg_content") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'msg_content' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'msg_content' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'msg_content' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "message_delays") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'message_delays' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'message_delays' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'message_delays' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSRecorderMessage::Message");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return make_field_cmp(&T::instance_name, next);
    }
    if (std::strcmp(field, "type") == 0) {
      return make_field_cmp(&T::type, next);
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return make_field_cmp(&T::timestamp, next);
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return make_field_cmp(&T::serialized_vector_clock, next);
    }
    if (std::strcmp(field, "topic") == 0) {
      return make_field_cmp(&T::topic, next);
    }
    if (std::strcmp(field, "msg_id") == 0) {
      return make_field_cmp(&T::msg_id, next);
    }
    if (std::strcmp(field, "msg_content") == 0) {
      return make_field_cmp(&T::msg_content, next);
    }
    if (std::strcmp(field, "message_delays") == 0) {
      return make_field_cmp(&T::message_delays, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Message)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "instance_name", "type", "timestamp", "serialized_vector_clock", "topic", "msg_id", "msg_content", "message_delays", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return &static_cast<const T*>(stru)->instance_name;
    }
    if (std::strcmp(field, "type") == 0) {
      return &static_cast<const T*>(stru)->type;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return &static_cast<const T*>(stru)->timestamp;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return &static_cast<const T*>(stru)->serialized_vector_clock;
    }
    if (std::strcmp(field, "topic") == 0) {
      return &static_cast<const T*>(stru)->topic;
    }
    if (std::strcmp(field, "msg_id") == 0) {
      return &static_cast<const T*>(stru)->msg_id;
    }
    if (std::strcmp(field, "msg_content") == 0) {
      return &static_cast<const T*>(stru)->msg_content;
    }
    if (std::strcmp(field, "message_delays") == 0) {
      return &static_cast<const T*>(stru)->message_delays;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Message)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      static_cast<T*>(lhs)->instance_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "type") == 0) {
      static_cast<T*>(lhs)->type = *static_cast<const DDSRecorderMessage::MessageType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      static_cast<T*>(lhs)->timestamp = *static_cast<const CORBA::LongLong*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      static_cast<T*>(lhs)->serialized_vector_clock = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "topic") == 0) {
      static_cast<T*>(lhs)->topic = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "msg_id") == 0) {
      static_cast<T*>(lhs)->msg_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "msg_content") == 0) {
      static_cast<T*>(lhs)->msg_content = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "message_delays") == 0) {
      static_cast<T*>(lhs)->message_delays = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Message)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->instance_name.in(), static_cast<const T*>(rhs)->instance_name.in());
    }
    if (std::strcmp(field, "type") == 0) {
      return static_cast<const T*>(lhs)->type == static_cast<const T*>(rhs)->type;
    }
    if (std::strcmp(field, "timestamp") == 0) {
      return static_cast<const T*>(lhs)->timestamp == static_cast<const T*>(rhs)->timestamp;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->serialized_vector_clock.in(), static_cast<const T*>(rhs)->serialized_vector_clock.in());
    }
    if (std::strcmp(field, "topic") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->topic.in(), static_cast<const T*>(rhs)->topic.in());
    }
    if (std::strcmp(field, "msg_id") == 0) {
      return static_cast<const T*>(lhs)->msg_id == static_cast<const T*>(rhs)->msg_id;
    }
    if (std::strcmp(field, "msg_content") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->msg_content.in(), static_cast<const T*>(rhs)->msg_content.in());
    }
    if (std::strcmp(field, "message_delays") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->message_delays.in(), static_cast<const T*>(rhs)->message_delays.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Message)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSRecorderMessage::Message>()
{
  static MetaStructImpl<DDSRecorderMessage::Message> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, DDSRecorderMessage::Message*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSRecorderMessage::Message>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Message */


/* Begin ENUM: CommandType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool operator<<(Serializer& strm, const DDSRecorderMessage::CommandType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  return strm << static_cast<CORBA::ULong>(enumval);
}

bool operator>>(Serializer& strm, DDSRecorderMessage::CommandType& enumval)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(enumval);
  CORBA::ULong temp = 0;
  if (strm >> temp) {
    enumval = static_cast<DDSRecorderMessage::CommandType>(temp);
    return true;
  }
  return false;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSRecorderMessage::CommandType& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  switch (value) {
  case DDSRecorderMessage::RECORDING_START:
    value_writer.write_enum("RECORDING_START", DDSRecorderMessage::RECORDING_START);
    break;
  case DDSRecorderMessage::RECORDING_STOP:
    value_writer.write_enum("RECORDING_STOP", DDSRecorderMessage::RECORDING_STOP);
    break;
  case DDSRecorderMessage::SEND_INTERNAL_ND_CALLS:
    value_writer.write_enum("SEND_INTERNAL_ND_CALLS", DDSRecorderMessage::SEND_INTERNAL_ND_CALLS);
    break;
  }
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

const char* gen_DDSRecorderMessage_CommandType_names[] = {
  "RECORDING_START",
  "RECORDING_STOP",
  "SEND_INTERNAL_ND_CALLS"
};
const size_t gen_DDSRecorderMessage_CommandType_names_size = 3;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


/* End ENUM: CommandType */


/* Begin STRUCT: Command */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSRecorderMessage::Command& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.instance_name.in()) + 1;
  find_size_ulong(size, padding);
}

bool operator<<(Serializer& strm, const DDSRecorderMessage::Command& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.instance_name.in())
    && (strm << stru.cmd);
}

bool operator>>(Serializer& strm, DDSRecorderMessage::Command& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.instance_name.out())
    && (strm >> stru.cmd);
}

size_t gen_max_marshaled_size(const DDSRecorderMessage::Command& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSRecorderMessage::Command> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSRecorderMessage::Command> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.instance_name.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const DDSRecorderMessage::Command> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.id)
    && (strm << stru.t.instance_name.in());
}

bool operator>>(Serializer& strm, KeyOnly<DDSRecorderMessage::Command> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.id)
    && (strm >> stru.t.instance_name.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSRecorderMessage::Command& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_field("id");
  value_writer.write_int32(value.id);
  value_writer.end_field();
  value_writer.begin_field("instance_name");
  value_writer.write_string(value.instance_name);
  value_writer.end_field();
  value_writer.begin_field("cmd");
  vwrite(value_writer, value.cmd);
  value_writer.end_field();
  value_writer.end_struct();
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSRecorderMessage {
::DDS::DataWriter_ptr CommandTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Command> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr CommandTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Command> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr CommandTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Command> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Command, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& CommandTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Command>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool CommandTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* CommandTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

CommandTypeSupport::_ptr_type CommandTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSRecorderMessage::Command> : MetaStruct {
  typedef DDSRecorderMessage::Command T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "id")) {
      return true;
    }
    if (!ACE_OS::strcmp(field, "instance_name")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSRecorderMessage::Command& typed = *static_cast<const DDSRecorderMessage::Command*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return typed.instance_name.in();
    }
    if (std::strcmp(field, "cmd") == 0) {
      return gen_DDSRecorderMessage_CommandType_names[typed.cmd];
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Command)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (std::strcmp(field, "instance_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'instance_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'instance_name' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'instance_name' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "cmd") == 0) {
      ACE_CDR::ULong val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'cmd' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'cmd' could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSRecorderMessage::Command");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return make_field_cmp(&T::instance_name, next);
    }
    if (std::strcmp(field, "cmd") == 0) {
      return make_field_cmp(&T::cmd, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Command)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "instance_name", "cmd", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return &static_cast<const T*>(stru)->instance_name;
    }
    if (std::strcmp(field, "cmd") == 0) {
      return &static_cast<const T*>(stru)->cmd;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Command)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      static_cast<T*>(lhs)->instance_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "cmd") == 0) {
      static_cast<T*>(lhs)->cmd = *static_cast<const DDSRecorderMessage::CommandType*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Command)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->instance_name.in(), static_cast<const T*>(rhs)->instance_name.in());
    }
    if (std::strcmp(field, "cmd") == 0) {
      return static_cast<const T*>(lhs)->cmd == static_cast<const T*>(rhs)->cmd;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Command)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSRecorderMessage::Command>()
{
  static MetaStructImpl<DDSRecorderMessage::Command> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, DDSRecorderMessage::Command*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSRecorderMessage::Command>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Command */


/* Begin STRUCT: CommandReply */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSRecorderMessage::CommandReply& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.instance_name.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.command_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.content.in()) + 1;
}

bool operator<<(Serializer& strm, const DDSRecorderMessage::CommandReply& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.instance_name.in())
    && (strm << stru.command_id)
    && (strm << stru.content.in());
}

bool operator>>(Serializer& strm, DDSRecorderMessage::CommandReply& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.instance_name.out())
    && (strm >> stru.command_id)
    && (strm >> stru.content.out());
}

size_t gen_max_marshaled_size(const DDSRecorderMessage::CommandReply& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSRecorderMessage::CommandReply> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSRecorderMessage::CommandReply> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.instance_name.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const DDSRecorderMessage::CommandReply> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.id)
    && (strm << stru.t.instance_name.in());
}

bool operator>>(Serializer& strm, KeyOnly<DDSRecorderMessage::CommandReply> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.id)
    && (strm >> stru.t.instance_name.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSRecorderMessage::CommandReply& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_field("id");
  value_writer.write_int32(value.id);
  value_writer.end_field();
  value_writer.begin_field("instance_name");
  value_writer.write_string(value.instance_name);
  value_writer.end_field();
  value_writer.begin_field("command_id");
  value_writer.write_int32(value.command_id);
  value_writer.end_field();
  value_writer.begin_field("content");
  value_writer.write_string(value.content);
  value_writer.end_field();
  value_writer.end_struct();
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSRecorderMessage {
::DDS::DataWriter_ptr CommandReplyTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<CommandReply> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr CommandReplyTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<CommandReply> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr CommandReplyTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<CommandReply> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<CommandReply, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& CommandReplyTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<CommandReply>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool CommandReplyTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* CommandReplyTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

CommandReplyTypeSupport::_ptr_type CommandReplyTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSRecorderMessage::CommandReply> : MetaStruct {
  typedef DDSRecorderMessage::CommandReply T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 2; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "id")) {
      return true;
    }
    if (!ACE_OS::strcmp(field, "instance_name")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSRecorderMessage::CommandReply& typed = *static_cast<const DDSRecorderMessage::CommandReply*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return typed.instance_name.in();
    }
    if (std::strcmp(field, "command_id") == 0) {
      return typed.command_id;
    }
    if (std::strcmp(field, "content") == 0) {
      return typed.content.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::CommandReply)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (std::strcmp(field, "instance_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'instance_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'instance_name' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'instance_name' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "command_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'command_id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'command_id' could not be skipped");
      }
    }
    if (std::strcmp(field, "content") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'content' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'content' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'content' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSRecorderMessage::CommandReply");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return make_field_cmp(&T::instance_name, next);
    }
    if (std::strcmp(field, "command_id") == 0) {
      return make_field_cmp(&T::command_id, next);
    }
    if (std::strcmp(field, "content") == 0) {
      return make_field_cmp(&T::content, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::CommandReply)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "instance_name", "command_id", "content", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return &static_cast<const T*>(stru)->instance_name;
    }
    if (std::strcmp(field, "command_id") == 0) {
      return &static_cast<const T*>(stru)->command_id;
    }
    if (std::strcmp(field, "content") == 0) {
      return &static_cast<const T*>(stru)->content;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::CommandReply)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      static_cast<T*>(lhs)->instance_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "command_id") == 0) {
      static_cast<T*>(lhs)->command_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "content") == 0) {
      static_cast<T*>(lhs)->content = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::CommandReply)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "instance_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->instance_name.in(), static_cast<const T*>(rhs)->instance_name.in());
    }
    if (std::strcmp(field, "command_id") == 0) {
      return static_cast<const T*>(lhs)->command_id == static_cast<const T*>(rhs)->command_id;
    }
    if (std::strcmp(field, "content") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->content.in(), static_cast<const T*>(rhs)->content.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::CommandReply)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSRecorderMessage::CommandReply>()
{
  static MetaStructImpl<DDSRecorderMessage::CommandReply> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, DDSRecorderMessage::CommandReply*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSRecorderMessage::CommandReply>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: CommandReply */


/* Begin STRUCT: Acknowledgement */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const DDSRecorderMessage::Acknowledgement& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.sending_instance.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.receiving_instance.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.port_name.in()) + 1;
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.acked_id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.serialized_vector_clock.in()) + 1;
}

bool operator<<(Serializer& strm, const DDSRecorderMessage::Acknowledgement& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.id)
    && (strm << stru.sending_instance.in())
    && (strm << stru.receiving_instance.in())
    && (strm << stru.port_name.in())
    && (strm << stru.acked_id)
    && (strm << stru.serialized_vector_clock.in());
}

bool operator>>(Serializer& strm, DDSRecorderMessage::Acknowledgement& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.id)
    && (strm >> stru.sending_instance.out())
    && (strm >> stru.receiving_instance.out())
    && (strm >> stru.port_name.out())
    && (strm >> stru.acked_id)
    && (strm >> stru.serialized_vector_clock.out());
}

size_t gen_max_marshaled_size(const DDSRecorderMessage::Acknowledgement& stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

size_t gen_max_marshaled_size(KeyOnly<const DDSRecorderMessage::Acknowledgement> stru, bool align)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(align);
  return 0;
}

void gen_find_size(KeyOnly<const DDSRecorderMessage::Acknowledgement> stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  if ((size + padding) % 4) {
    padding += 4 - ((size + padding) % 4);
  }
  size += gen_max_marshaled_size(stru.t.id);
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.sending_instance.in()) + 1;
  find_size_ulong(size, padding);
  size += ACE_OS::strlen(stru.t.receiving_instance.in()) + 1;
}

bool operator<<(Serializer& strm, KeyOnly<const DDSRecorderMessage::Acknowledgement> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm << stru.t.id)
    && (strm << stru.t.sending_instance.in())
    && (strm << stru.t.receiving_instance.in());
}

bool operator>>(Serializer& strm, KeyOnly<DDSRecorderMessage::Acknowledgement> stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  return (strm >> stru.t.id)
    && (strm >> stru.t.sending_instance.out())
    && (strm >> stru.t.receiving_instance.out());
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const DDSRecorderMessage::Acknowledgement& value)
{
  ACE_UNUSED_ARG(value_writer);
  ACE_UNUSED_ARG(value);
  value_writer.begin_struct();
  value_writer.begin_field("id");
  value_writer.write_int32(value.id);
  value_writer.end_field();
  value_writer.begin_field("sending_instance");
  value_writer.write_string(value.sending_instance);
  value_writer.end_field();
  value_writer.begin_field("receiving_instance");
  value_writer.write_string(value.receiving_instance);
  value_writer.end_field();
  value_writer.begin_field("port_name");
  value_writer.write_string(value.port_name);
  value_writer.end_field();
  value_writer.begin_field("acked_id");
  value_writer.write_int32(value.acked_id);
  value_writer.end_field();
  value_writer.begin_field("serialized_vector_clock");
  value_writer.write_string(value.serialized_vector_clock);
  value_writer.end_field();
  value_writer.end_struct();
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace DDSRecorderMessage {
::DDS::DataWriter_ptr AcknowledgementTypeSupportImpl::create_datawriter()
{
  typedef OpenDDS::DCPS::DataWriterImpl_T<Acknowledgement> DataWriterImplType;
  ::DDS::DataWriter_ptr writer_impl = ::DDS::DataWriter::_nil();
  ACE_NEW_NORETURN(writer_impl,
                   DataWriterImplType());
  return writer_impl;
}

::DDS::DataReader_ptr AcknowledgementTypeSupportImpl::create_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Acknowledgement> DataReaderImplType;
  ::DDS::DataReader_ptr reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(reader_impl,
                   DataReaderImplType());
  return reader_impl;
}

#ifndef OPENDDS_NO_MULTI_TOPIC
::DDS::DataReader_ptr AcknowledgementTypeSupportImpl::create_multitopic_datareader()
{
  typedef OpenDDS::DCPS::DataReaderImpl_T<Acknowledgement> DataReaderImplType;
  typedef OpenDDS::DCPS::MultiTopicDataReader_T<Acknowledgement, DataReaderImplType> MultiTopicDataReaderImplType;
  ::DDS::DataReader_ptr multitopic_reader_impl = ::DDS::DataReader::_nil();
  ACE_NEW_NORETURN(multitopic_reader_impl,
                   MultiTopicDataReaderImplType());
  return multitopic_reader_impl;
}
#endif /* !OPENDDS_NO_MULTI_TOPIC */

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
const OpenDDS::DCPS::MetaStruct& AcknowledgementTypeSupportImpl::getMetaStructForType()
{
  return OpenDDS::DCPS::getMetaStruct<Acknowledgement>();
}
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */

bool AcknowledgementTypeSupportImpl::has_dcps_key()
{
  return TraitsType::gen_has_key ();
}

const char* AcknowledgementTypeSupportImpl::default_type_name() const
{
  return TraitsType::type_name();
}

AcknowledgementTypeSupport::_ptr_type AcknowledgementTypeSupportImpl::_narrow(CORBA::Object_ptr obj)
{
  return TypeSupportType::_narrow(obj);
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<DDSRecorderMessage::Acknowledgement> : MetaStruct {
  typedef DDSRecorderMessage::Acknowledgement T;

#ifndef OPENDDS_NO_MULTI_TOPIC
  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 3; }

#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool isDcpsKey(const char* field) const
  {
    if (!ACE_OS::strcmp(field, "id")) {
      return true;
    }
    if (!ACE_OS::strcmp(field, "sending_instance")) {
      return true;
    }
    if (!ACE_OS::strcmp(field, "receiving_instance")) {
      return true;
    }
    return false;
  }

  Value getValue(const void* stru, const char* field) const
  {
    const DDSRecorderMessage::Acknowledgement& typed = *static_cast<const DDSRecorderMessage::Acknowledgement*>(stru);
    ACE_UNUSED_ARG(typed);
    if (std::strcmp(field, "id") == 0) {
      return typed.id;
    }
    if (std::strcmp(field, "sending_instance") == 0) {
      return typed.sending_instance.in();
    }
    if (std::strcmp(field, "receiving_instance") == 0) {
      return typed.receiving_instance.in();
    }
    if (std::strcmp(field, "port_name") == 0) {
      return typed.port_name.in();
    }
    if (std::strcmp(field, "acked_id") == 0) {
      return typed.acked_id;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return typed.serialized_vector_clock.in();
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Acknowledgement)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'id' could not be skipped");
      }
    }
    if (std::strcmp(field, "sending_instance") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'sending_instance' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'sending_instance' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'sending_instance' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "receiving_instance") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'receiving_instance' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'receiving_instance' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'receiving_instance' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "port_name") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'port_name' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'port_name' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'port_name' contents could not be skipped");
      }
    }
    if (std::strcmp(field, "acked_id") == 0) {
      ACE_CDR::Long val;
      if (!(ser >> val)) {
        throw std::runtime_error("Field 'acked_id' could not be deserialized");
      }
      return val;
    } else {
      if (!ser.skip(1, 4)) {
        throw std::runtime_error("Field 'acked_id' could not be skipped");
      }
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      TAO::String_Manager val;
      if (!(ser >> val.out())) {
        throw std::runtime_error("Field 'serialized_vector_clock' could not be deserialized");
      }
      return val;
    } else {
      ACE_CDR::ULong len;
      if (!(ser >> len)) {
        throw std::runtime_error("String 'serialized_vector_clock' length could not be deserialized");
      }
      if (!ser.skip(static_cast<ACE_UINT16>(len))) {
        throw std::runtime_error("String 'serialized_vector_clock' contents could not be skipped");
      }
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not valid for struct DDSRecorderMessage::Acknowledgement");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "id") == 0) {
      return make_field_cmp(&T::id, next);
    }
    if (std::strcmp(field, "sending_instance") == 0) {
      return make_field_cmp(&T::sending_instance, next);
    }
    if (std::strcmp(field, "receiving_instance") == 0) {
      return make_field_cmp(&T::receiving_instance, next);
    }
    if (std::strcmp(field, "port_name") == 0) {
      return make_field_cmp(&T::port_name, next);
    }
    if (std::strcmp(field, "acked_id") == 0) {
      return make_field_cmp(&T::acked_id, next);
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return make_field_cmp(&T::serialized_vector_clock, next);
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Acknowledgement)");
  }

#ifndef OPENDDS_NO_MULTI_TOPIC
  const char** getFieldNames() const
  {
    static const char* names[] = {"id", "sending_instance", "receiving_instance", "port_name", "acked_id", "serialized_vector_clock", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "id") == 0) {
      return &static_cast<const T*>(stru)->id;
    }
    if (std::strcmp(field, "sending_instance") == 0) {
      return &static_cast<const T*>(stru)->sending_instance;
    }
    if (std::strcmp(field, "receiving_instance") == 0) {
      return &static_cast<const T*>(stru)->receiving_instance;
    }
    if (std::strcmp(field, "port_name") == 0) {
      return &static_cast<const T*>(stru)->port_name;
    }
    if (std::strcmp(field, "acked_id") == 0) {
      return &static_cast<const T*>(stru)->acked_id;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return &static_cast<const T*>(stru)->serialized_vector_clock;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Acknowledgement)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "id") == 0) {
      static_cast<T*>(lhs)->id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "sending_instance") == 0) {
      static_cast<T*>(lhs)->sending_instance = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "receiving_instance") == 0) {
      static_cast<T*>(lhs)->receiving_instance = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "port_name") == 0) {
      static_cast<T*>(lhs)->port_name = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "acked_id") == 0) {
      static_cast<T*>(lhs)->acked_id = *static_cast<const CORBA::Long*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      static_cast<T*>(lhs)->serialized_vector_clock = *static_cast<const TAO::String_Manager*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Acknowledgement)");
  }
#endif /* OPENDDS_NO_MULTI_TOPIC */

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "id") == 0) {
      return static_cast<const T*>(lhs)->id == static_cast<const T*>(rhs)->id;
    }
    if (std::strcmp(field, "sending_instance") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->sending_instance.in(), static_cast<const T*>(rhs)->sending_instance.in());
    }
    if (std::strcmp(field, "receiving_instance") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->receiving_instance.in(), static_cast<const T*>(rhs)->receiving_instance.in());
    }
    if (std::strcmp(field, "port_name") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->port_name.in(), static_cast<const T*>(rhs)->port_name.in());
    }
    if (std::strcmp(field, "acked_id") == 0) {
      return static_cast<const T*>(lhs)->acked_id == static_cast<const T*>(rhs)->acked_id;
    }
    if (std::strcmp(field, "serialized_vector_clock") == 0) {
      return 0 == ACE_OS::strcmp(static_cast<const T*>(lhs)->serialized_vector_clock.in(), static_cast<const T*>(rhs)->serialized_vector_clock.in());
    }
    throw std::runtime_error("Field " + OPENDDS_STRING(field) + " not found or its type is not supported (in struct DDSRecorderMessage::Acknowledgement)");
  }
};

template<>
const MetaStruct& getMetaStruct<DDSRecorderMessage::Acknowledgement>()
{
  static MetaStructImpl<DDSRecorderMessage::Acknowledgement> msi;
  return msi;
}

bool gen_skip_over(Serializer& ser, DDSRecorderMessage::Acknowledgement*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<DDSRecorderMessage::Acknowledgement>().getValue(ser, "");
  return true;
}

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Acknowledgement */

/* End MODULE: DDSRecorderMessage */
