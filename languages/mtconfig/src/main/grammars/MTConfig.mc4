// (c) https://github.com/MontiCore/monticore

/**
 * MTConfig provides additional properties for MontiThings language elements.
 */
grammar MTConfig extends MontiThings  {

  start MTConfigUnit;

  /* ============================================================ */
  /* ============ Requirement & Hookpointspecification ========== */
  /* ============================================================ */

  /**
   * MTConfigUnit represents the complete properties for MontiThings configuration.
   * @attribute package  The package declaration of the elements.
   * @attribute Element List of elements.
   */
  scope MTConfigUnit = ("package" package:MCQualifiedName ";")?  Element+;

  /**
   * Element is an extension point that is used for the main parts making up the MTConfig language.
   */
  interface Element;

  /**
   * MTCFGTag is an extension point that is used
   * for providing component and platform dependent configuration properties.
   */
  interface MTCFGTag;

  /**
   * CompConfig represents the configuration of a MontiThings Component for a specific platform.
   * @attribute Name Name of the MontiThings component.
   * @attribute platform Deployment platform. E.g. GENERIC, Windows, Arduino etc.
   */
  scope symbol CompConfig implements Element = "config" componentType:Name "for" platform:Name /*TODO set appropriate reference when possible */
  "{"
    MTCFGTag*
  "}";

  /**
   * PortTemplateTag specifies the templates that are used for processing of the specified port.
   * @attribute Name Name of the MontiThings port.
   */
  scope symbol PortTemplateTag implements MTCFGTag = port:Name "{"
        Hookpoint+
  "}";

  /**
   * Hookpoint specifies the template and the arguments that should be supplied to the template.
   * @attribute Name Identification of the Hookpoint.
   * @attribute template Unqualified name of the template.
   * @attribute Arguments Attributes required by the template.
   */
  symbol Hookpoint = Name "=" template:String Arguments? ";";

  /**
   *  RequirementStatement contain information about what physical requirements
   *  a component has. E.g Sensors/Actuators etc.
   */
  scope RequirementStatement implements MTCFGTag =
    "requires" (propertiess:Property | "{" propertiess:Property+ "}");

  symbol Property = Name& ":"
    (
      stringValue:StringLiteral | numericValue:SignedNumericLiteral
    ) ";";

  SeparationHint implements MTCFGTag = "separate" "none" ";";
}