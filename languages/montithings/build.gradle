/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
}

group = "montithings.languages"

def grammarDir = "$projectDir/src/main/grammars"

sourceSets {
  main {
    java.srcDirs += ["$buildDir/generated-sources/monticore/sourcecode"]
  }
  test {
    java.srcDirs += ["$buildDir/generated-test-sources/monticore/sourcecode"]
  }
}

test { useJUnitPlatform() }

configurations { grammar }

dependencies {
  grammar "de.monticore:monticore-grammar:$monticore_version:$grammars_classifier"
  grammar "montiarc.languages:montiarc-fe:6.0.0-SNAPSHOT:$grammars_classifier"
  grammar "montiarc.languages:arc-fe:6.0.0-SNAPSHOT:$grammars_classifier"
  grammar files(project(":languages:monticore-extensions").projectDir.toPath().resolve("src/main/grammars"))
  grammar files(project(":languages:montiarc-extensions").projectDir.toPath().resolve("src/main/grammars"))
  grammar files(project(":languages:error-handling").projectDir.toPath().resolve("src/main/grammars"))

  implementation "de.monticore:monticore-grammar:$monticore_version"
  implementation "de.monticore:monticore-runtime:$monticore_version"
  implementation "de.monticore:monticore-generator:$monticore_version"

  implementation project(":languages:montiarc-extensions")
  implementation project(":languages:monticore-extensions")
  implementation project(":languages:error-handling")
  implementation "montiarc.languages:arc-fe:$montiarc_version"
  implementation "montiarc.languages:montiarc-fe:$montiarc_version"
  implementation "de.monticore.lang:cd4analysis:1.7.0"
  implementation "de.se_rwth.commons:se-commons-utilities:1.7.9"
  implementation "de.se_rwth.commons:se-commons-logging:1.7.9"
  implementation "org.antlr:antlr4-runtime:4.7.1"
  implementation "org.apache.commons:commons-lang3:3.9"
  implementation "com.google.guava:guava:18.0"
  implementation "org.assertj:assertj-core:3.7.0"
  testImplementation "junit:junit:4.12"
  testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
  testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"
  testImplementation "montiarc:util:6.0.0-SNAPSHOT"
  testImplementation "de.monticore:monticore-runtime:$monticore_version"
  testImplementation "ch.qos.logback:logback-classic:1.1.2"
  compileOnly "de.monticore:monticore-grammar:$monticore_version"
}

task generateGrammarMontiThings(type: MCTask) {
  grammar = file "$grammarDir/MontiThings.mc4"
  outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
  handcodedPath = [file("$projectDir/src/main/java")]
  def upToDate = incCheck("MontiThings.mc4")
  outputs.upToDateWhen { upToDate }
}

//TODO maven assembly plugin equivalent?

//TODO surefire?

def grammarDependencies = ext {
  MontiThings = [":languages:montiarc-extensions:generateGrammarClockControl",
                 ":languages:montiarc-extensions:generateGrammarPortExtensions",
                 ":languages:error-handling:generateGrammarPrePostCondition",
                 ":languages:error-handling:generateGrammarConditionCatch",
                 ":languages:monticore-extensions:generateGrammarSetDefinitions"]
}

compileJava {
  tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
    def grammarName = it.getName().substring("generateGrammar".length())
    it.dependsOn grammarDependencies[grammarName]
  }

  dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

task grammars_Jar(type: Jar) {
  from "$projectDir/src/main/grammars"
  archiveClassifier = "$grammars_classifier"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = "$project.name"
      from components.java
      artifact grammars_Jar
    }
  }
}
