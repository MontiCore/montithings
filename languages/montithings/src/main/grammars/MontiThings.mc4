grammar MontiThings extends MontiArc {

    start MACompilationUnit;

    /**
    * Defines an interface of a component containing
    * incoming and outgoing ports to external resources.
    *
    *
    * @attribute stereotype an optional stereotype
    * @attribute resourcePorts a list of ports that are contained in
    *   this interface
    */
    ResourceInterface implements Element =
      Stereotype?
      "resource port" resourcePort:(ResourcePort || ",")+ ";";

     /**
      * An incoming resource port is used to receive messages from external sources, an
      * outgoing resource port is used to send messages to external resources.
      *
      * @attribute stereotype an optional stereotype
      * @attribute incoming true, if this is an incoming port
      * @attribute outgoing true, if this is an outgoing port
      * @attribute type the message type of this port
      * @attribute name an optional name of this port
      * @attribute resourceoption optional configuration for the
      *    resource port
      */
    symbol ResourcePort =
      Stereotype?
      (incoming:["in"] | outgoing:["out"])
      Type Name ("(" ((ResourceOption "," uri:String?) | ResourceOption | uri:String? ) ")")?
      ("requires" requiresType:Name ":" requiresName:StringLiteral)?  ;


    /**
    * A Control Block consists of statements controlling the execution
    * behavior of the component. The described behavior in this block
    * only modifies the already existing behavior of the component
    * (hwc, automatons, etc) and thus does not implement the
    * BehaviorElement interface.
    **/
    ControlBlock implements Element =
        "control" "{"
        ControlStatement*
        "}";


    interface ControlStatement;

    /**
    * The calculation interval specifies in which 
    * interval the component is executed.
    */
    CalculationInterval implements ControlStatement =
    	"update interval" interval:IntLiteral TimeUnit";";

    enum TimeUnit = "ms" | "s" | "min";

    /**
    * BatchStatements define which ports should be
    * handled in batch processing mode instead of
    * handling only one incoming message per tick
    **/
    BatchStatement implements ControlStatement =
        "batch" batchPorts:(Name& || ",")+ ";";

    /**
    * ExecutionStatements specify which function in the
    * handwritten implementation should be executed depending
    * on the presence on messages on incoming ports and
    * values of current messages.
    **/
   ExecutionStatement implements ControlStatement =
        "if" (guard:Expression) ":" method:Name&"()" ";";

    /** SyncStatements allow the specification of groups of ports
    * that should only be handled together
    **/
    symbol SyncStatement implements ControlStatement =
        "sync port group" Name& "(" syncedPort:(Name || ",")* ")" ";";


    /**
    * Optional settings for resource ports
    */
    enum ResourceOption =
      "netserver" | "netclient" | "ipcreqrep"
      | "ipclisten" | "fsappend" | "fsoverwrite";

    /**
    * Imported CPP elements (data types, components etc)
    */
    CPPImportStatementLOCAL implements ImportStatement =
       "#include" cppImport:String;

    CPPImportStatementSYSTEM implements ImportStatement =
      "#include" "<" cppSystemImport:(Name& || ".")+ ">";

    /**
    *  RequirementStatements contain information about what physical requirements
    *  a component has. E.g Sensors/Actuators etc.
    */
    RequirementStatement implements Element =
      "requires" (propertiess:Property | "{" properties:Property+ "}");

    Property =
      Name& ":" (stringValue:StringLiteral | booleanValue:BooleanLiteral
          | doubleValue:DoubleLiteral | integerValue:IntLiteral | longValue:LongLiteral) ";";


}
