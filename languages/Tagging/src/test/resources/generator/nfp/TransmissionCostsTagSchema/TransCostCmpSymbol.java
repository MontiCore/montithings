/* generated by template templates.de.monticore.lang.tagschema.ValuedTagType*/


package nfp.TransmissionCostsTagSchema;

import de.monticore.lang.tagging._symboltable.TagKind;
import de.monticore.lang.tagging._symboltable.TagSymbol;

import org.jscience.physics.amount.Amount;
import javax.measure.quantity.Power;
import javax.measure.unit.Unit;

/**
 * Created by ValuedTagType.ftl
 */
public class TransCostCmpSymbol extends TagSymbol {
  public static final TransCostCmpKind KIND = TransCostCmpKind.INSTANCE;

  public TransCostCmpSymbol(Amount<Power> value) {
    this(KIND, value);
  }

  public TransCostCmpSymbol(Number number, Unit<Power> unit) {
    this(KIND, number, unit);
  }

  protected TransCostCmpSymbol(TransCostCmpKind kind, Amount<Power> value) {
    super(kind, value);
  }

  protected TransCostCmpSymbol(TransCostCmpKind kind, Number number, Unit<Power> unit) {
    this(kind, number.toString().contains(".") ?
      Amount.valueOf(number.doubleValue(), unit) :
      Amount.valueOf(number.intValue(),
          unit));
  }

  public Amount<Power> getValue() {
     return getValue(0);
  }

  public Number getNumber() {
    return getValue().getExactValue();
  }

  public Unit<Power> getUnit() {
    return getValue().getUnit();
  }

  @Override
  public String toString() {
    return String.format("TransCostCmp = %s %s",
      getNumber(), getUnit());
  }

  public static class TransCostCmpKind extends TagKind {
    public static final TransCostCmpKind INSTANCE = new TransCostCmpKind();

    protected TransCostCmpKind() {
    }
  }
}