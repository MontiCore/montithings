/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated from model null*/
/* generated by template templates.de.monticore.lang.montiarc.tagschema.ValuedTagType*/


package de.monticore.lang.montiarc.tagging;

import javax.measure.Measure;
import javax.measure.quantity.Power;
import javax.measure.unit.Unit;

import de.monticore.lang.tagging._symboltable.TagKind;
import de.monticore.lang.tagging._symboltable.TagSymbol;

/**
 * Created by ValuedTagType.ftl
 */
public class PowerBooleanSymbol extends TagSymbol {
  public static final PowerBooleanKind KIND = PowerBooleanKind.INSTANCE;

  public PowerBooleanSymbol(Measure<? extends Number, Power> value) {
    this(KIND, value);
  }

  public PowerBooleanSymbol(Number number, Unit<Power> unit) {
    this(KIND, number, unit);
  }

  protected PowerBooleanSymbol(PowerBooleanKind kind, Measure<? extends Number, Power> value) {
    super(kind, value);
  }

  protected PowerBooleanSymbol(PowerBooleanKind kind, Number number, Unit<Power> unit) {
    this(kind, number.toString().contains(".") ?
        Measure.valueOf(number.doubleValue(), unit) :
        Measure.valueOf(number.intValue(),
            unit));
  }

  public Measure<? extends Number, Power> getValue() {
     return getValue(0);
  }

  public Unit<Power> getUnit() {
    return getValue().getUnit();
  }

  public Number getNumber() {
    return getValue().getValue();
  }

  @Override
  public String toString() {
    return String.format("PowerBoolean = %s",
      getValue().toString());
  }

  public static class PowerBooleanKind extends TagKind {
    public static final PowerBooleanKind INSTANCE = new PowerBooleanKind();

    protected PowerBooleanKind() {
    }
  }
}