package de.monticore.lang;

/**
 * Basic grammar to tag non-functional properties
 *
 * @author Michael von Wenckstern
 */
grammar TagSchema extends de.monticore.common.Common {

    TagSchemaUnit =
      ("package" package:(Name& || ".")+ ";")?
      (ImportStatement)*
      "tagschema" Name "{" TagType+ "}";
	
	interface TagType;
    //ComplexTagType | EnumeratedTagType | ValuedTagType | SimpleTagType;

	ast TagType =
	  method public String getName() {
	    return "undefined";
	  };

	ScopeIdentifier =
	    component:"Component" |
	    componentInstance:"ComponentInstance" |
	    port:"Port" |
	    portInstance:"PortInstance" |
	    connector:"Connector" |
	    connectorInstance:"ConnectorInstance" |
	    identifier:Name;

	ast ScopeIdentifier =
	  method public String getScopeName() {
        if(isPresentComponent()) return getComponent();
        if(isPresentComponentInstance()) return getComponentInstance();
        if(isPresentPort()) return getPort();
        if(isPresentPortInstance()) return getPortInstance();
        if(isPresentConnector()) return getConnector();
        if(isPresentConnectorInstance()) return getConnectorInstance();
        if(isPresentIdentifier()) return getIdentifier();
        return "undefined";
	  };


    //ScopeIdentifier = Name;
	
	Scope = "for" (ScopeIdentifier || ",")+;
	
	symbol SimpleTagType implements TagType  = ("private")? "tagtype" Name Scope? ";" ;

	// modification form ML's tagging language (replaced String by Name --> is more to Java feeling)
	EnumeratedTagType  implements TagType  = ("private")? "tagtype" name:Name ":" enumText:Enum Scope? ";" ;
	token Enum = '[' (~('[' | ']') | String)+ ']';

	ValuedTagType implements TagType  = ("private")? "tagtype" Name ":"
	  (number:"Number"|string:"String"|boolean:"Boolean"|unitKind:Name) Scope? ";" ;

	// not supported in Symbol Table yet
//	ComplexTagType implements TagType = ("private")? "tagtype" Scope? "{" (Reference || ",")+ ";" "}" ;
//	ast ComplexTagType =
//    method public String getName() {
//      return "undefined";
//    };
	
//	Reference = Name ":" datatype:Name ("?"|"+"|"*")? ;



	ComplexTagType implements TagType  = ("private")? "tagtype" Name Scope? complexTag:ComplexTagDef;

	token ComplexTagDef = 'i' 's' WSS* Recursion (WSS* ';');
	fragment token Recursion = '{' (~('{' | '}' | '"') | String | Recursion)+ '}';
	fragment token WSS = (' ' | '\t' | '\r' | '\n');

}