// (c) https://github.com/MontiCore/monticore

/* Alpha-version: This is intended to become a MontiCore stable grammar. */

/**
 * This grammar is supposed to extend the functionality for writing
 * behavior for components directly into the MontiThings models
 */
component grammar Behavior extends de.monticore.literals.MCCommonLiterals,
                                   de.monticore.statements.MCCommonStatements,
                                   de.monticore.SIUnitLiterals,
                                   ArcBasis
{
  /**
   * ASTAfterStatement can be used to defer the execution
   * of a MCJavaBlock by the specified amount of time.
   * This is done asynchronously, i.e. statements after the
   * statement will be executed without delay.
   *
   * @attribute SIUnitLiteral
   *            Amount of time by which the execution of the  statements shall be deferred
   * @attribute MCJavaBlock
   *            Statements to be executed later
   */
  AfterStatement implements MCStatement =
    "after" SIUnitLiteral MCJavaBlock;

  /**
   * ASTEveryBlock contains statements that shall be executed
   * periodically. The interval between two executions refers
   * to the time since the last execution was started. For example,
   * if the code should be executed "every 5s" and the computation
   * takes 2 seconds, then the next computation will start 3 seconds
   * after the last execution finished. If the execution takes longer
   * than the interval between two execution a warning will be logged.
   *
   * @attribute Name
   *            Name of the block (can be used to start / stop execution)
   * @attribute SIUnitLiteral
   *            Distance between two executions
   * @attribute MCJavaBlock
   *            Statements to be executed periodically
   */
  symbol EveryBlock =
    (Name ":")? "every" SIUnitLiteral MCJavaBlock;

  /**
   * ASTLogStatement can be used to log to the console.
   * Similar to Bash, variables referenced in the StringLiteral
   * prefixed with a dollar symbol (e.g. "$variable") will be
   * replaced by their value.
   *
   * @attribute StringLiteral
   *            Text to print to the console
   */
  LogStatement implements MCStatement =
    "log" StringLiteral ";" ;
  nokeyword "log";

  /**
   * ASTAgoQualification can be used to access the values of
   * variables and ports at an earlier point in time.
   * Using "variable@ago(2s)" accesses the value of "variable"
   * 2 seconds before the execution of the AgoQualification.
   *
   * @attribute Expression
   *            Variable or port to be accessed
   * @attribute SIUnitLiteral
   *            Time at which value is accessed
   */
  AgoQualification implements Expression <400> =
    Expression "@ago" "(" SIUnitLiteral ")";

  /**
   * ASTConnectStatement can be used to describe behavior which dynamically
   * adds ports at runtime.
   *
   * @attribute From
   *            Name of the port to which another port should be connected
   * @attribute To
   *            Name of the port which should be connected to another port
   */
  ConnectStatement implements MCStatement =
    //from:MCQualifiedName "->" to:MCQualifiedName ";" ;
    Connector;

  /**
   * ASTDisConnectStatement can be used to describe behavior which dynamically
   * removes ports at runtime.
   *
   * @attribute From
   *            Name of the port which another port should be disconnected from
   * @attribute To
   *            Name of the port which should be disconnected
   */
  DisconnectStatement implements MCStatement =
    from:Name "-/>" to:Name ";" ;
}