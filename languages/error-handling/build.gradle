/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
}

group = "montithings.languages"

def grammarDir = "src/main/grammars"

sourceSets {
  main {
    java.srcDirs += ["$buildDir/generated-sources/monticore/sourcecode"]
  }
  test {
    java.srcDirs += ["$buildDir/generated-test-sources/monticore/sourcecode"]
  }
}

test { useJUnitPlatform() }

configurations { grammar }

dependencies {
  grammar "de.monticore:monticore-grammar:$monticore_version:$grammars_classifier"

  implementation "de.monticore:monticore-generator:$monticore_version"
  implementation "de.monticore:monticore-runtime:$monticore_version"
  implementation "de.monticore:monticore-grammar:$monticore_version"
  testImplementation "de.monticore:monticore-runtime:$monticore_version"
  testImplementation "de.monticore:monticore-runtime:$monticore_version:tests"

  implementation "de.monticore.lang:cd4analysis:$cd4a_version"
  implementation "de.monticore:javaDSL:$javadsl_version"
  testImplementation "montiarc:util:$montiarc_version"

  implementation "com.google.code.findbugs:jsr305:3.0.0"
  implementation "de.se_rwth.commons:se-commons-logging:$se_commons_version"
  implementation "de.se_rwth.commons:se-commons-utilities:$se_commons_version"
  implementation "com.google.guava:guava:$guava_version"
  implementation "org.antlr:antlr4-runtime:4.7.1"
  implementation "org.apache.commons:commons-lang3:3.9"
  implementation "org.assertj:assertj-core:$assertj_version"
  implementation "org.codehaus.janino:janino:$janino_version"
  testImplementation "junit:junit:$junit_version"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
  testImplementation "ch.qos.logback:logback-classic:$logback_version"
  compileOnly "de.monticore:monticore-grammar:$monticore_version"
  compileOnly "de.monticore:javaDSL:$javadsl_version"
}

fileTree(grammarDir).matching { include "**/*.mc4" }.each {
  def g = it
  def grammarName = it.getName().substring(0, it.getName().lastIndexOf("."))

  task "generateGrammar$grammarName" (type: MCTask) {
    grammar = file g
    outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
    handcodedPath file("$projectDir/src/main/java")
    def grammarIncludingPackage = file(grammarDir).toURI().relativize(g.toURI()).toString()
    def upToDate = incCheck(grammarIncludingPackage)
    outputs.upToDateWhen { upToDate }
  }
}

//TODO maven assembly plugin equivalent?

//TODO surefire?

def grammarDependencies = ext {
  ConditionBasis = []
  ConditionCatch = [":languages:error-handling:generateGrammarConditionBasis"]
  PrePostCondition = [":languages:error-handling:generateGrammarConditionBasis"]
}

compileJava {
  tasks.findAll { task -> task.name.startsWith("generateGrammar") }.each {
    def grammarName = it.getName().substring("generateGrammar".length())
    it.dependsOn grammarDependencies[grammarName]
  }

  dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

task grammars_Jar(type: Jar) {
  from "$projectDir/src/main/grammars"
  archiveClassifier = "$grammars_classifier"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = "$project.name"
      from components.java
      artifact grammars_Jar
    }
  }
}