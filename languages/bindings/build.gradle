/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
}

group = 'montithings.languages'

def grammarDir = "$projectDir/src/main/grammars"

sourceSets {
  main {
    java.srcDirs += ["$buildDir/generated-sources/monticore/sourcecode"]
  }
  test {
    java.srcDirs += ["$buildDir/generated-test-sources/monticore/sourcecode"]
  }
}

test { useJUnitPlatform() }

configurations {
  grammar
  librarymodels
}

dependencies {
  grammar "de.monticore:monticore-grammar:$monticore_version:$grammars_classifier"

  librarymodels "montiarc.libraries:maJavaLib:$majavalib_version"
  implementation 'montiarc.languages:montiarc-fe:6.0.0-SNAPSHOT'
  implementation 'de.se_rwth.commons:se-commons-logging:1.7.9'
  implementation 'com.google.guava:guava:18.0'
  implementation 'de.monticore.lang:cd4analysis:1.6.0'
  implementation 'org.antlr:antlr4-runtime:4.7.1'
  implementation 'de.monticore:monticore-runtime:6.1.0.1'
  implementation 'de.monticore:monticore-grammar:6.1.0.1'
  implementation 'de.monticore:javaDSL:4.3.11.1'
  implementation 'org.apache.commons:commons-lang3:3.9'
  implementation project(':generators:cd2cpp')
  implementation project(':languages:montithings')
  implementation 'org.assertj:assertj-core:3.7.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.0'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.1.0'
  testImplementation 'de.monticore:monticore-runtime:6.1.0.1'
  testImplementation 'ch.qos.logback:logback-classic:1.1.2'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.1.0'
  compileOnly 'de.monticore:monticore-grammar:6.1.0.1'
  compileOnly 'de.monticore:javaDSL:4.3.11.1'
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_jupiter_version"
  testImplementation "org.junit.jupiter:junit-jupiter-params:$junit_jupiter_version"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_jupiter_version"
}

task unpack_librarymodels(type: Sync) {
  dependsOn configurations.librarymodels

  from {
    configurations.librarymodels.collect { zipTree(it) }
  }
  into "$buildDir/$librarymodels_classifier"
}

task generateGrammarBindings(type: MCTask) {
  grammar = file "src/main/grammars/Bindings.mc4"
  outputDir = file "$buildDir/generated-sources/monticore/sourcecode"
  handcodedPath = [file("$projectDir/src/main/java")]
  def upToDate = incCheck("Bindings.mc4")
  outputs.upToDateWhen { upToDate }
}

//TODO maven assembly plugin equivalent?

//TODO surefire?

compileJava {
  dependsOn project.collect { it.tasks.findAll { task -> task.name.startsWith("generateGrammar") } }
}

task grammars_Jar(type: Jar) {
  from "$projectDir/src/main/grammars"
  archiveClassifier = "$grammars_classifier"
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = "$project.name"
      from components.java
      artifact grammars_Jar
    }
  }
}