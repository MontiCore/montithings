/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
}

group = "montithings.applications"

sourceSets {
  main {
    allSource.srcDirs += ["$buildDir/generated-sources"]
  }
}

configurations {
  librarymodels //into $buildDir/$librarymodels_classifier
  mt_rte
  mt_libs
  mt_headers
}

dependencies {
  librarymodels "montiarc.libraries:maJavaLib:$majavalib_version"
  mt_rte "montithings.generators:montithings2cpp:$version:$montithings_rte_classifier"
  mt_libs "montithings.generators:montithings2cpp:$version:$montithings_libs_classifier"
  mt_headers "montithings.generators:montithings2cpp:$version:$montithings_headers_classifier"
  implementation project(":generators:montithings2cpp")
  implementation "de.se_rwth.commons:se-commons-utilities:$se_commons_version"
  implementation project(":languages:montithings")
  implementation project(":languages:bindings")
  implementation "montiarc.libraries:simulator-rte:6.0.0-SNAPSHOT"
  implementation "montiarc.libraries:maa-rte:6.0.0-SNAPSHOT"
  implementation "de.se_rwth.commons:se-commons-groovy:1.7.9"
  implementation "de.monticore:monticore-runtime:6.1.0.1"
  implementation "montiarc.libraries:maJavaLib:$majavalib_version"
  implementation "de.monticore:monticore-grammar:6.1.0.1"
  implementation "de.monticore:javaDSL:4.3.11.1"
  implementation project(":generators:cd2cpp")
  implementation "de.monticore:monticore-generator:6.1.0.1"
  runtimeOnly "ch.qos.logback:logback-classic:1.1.2"
  testImplementation "junit:junit:4.12"
  testImplementation "de.monticore:monticore-runtime:6.1.0.1"
}

task unpack_librarymodels(type:Sync) {
    dependsOn configurations.librarymodels

    from {
      configurations.librarymodels.collect {zipTree(it)}
    }
  into "$buildDir/$librarymodels_classifier"
}

task unpack_mt2cppGenerators(type:Sync) {
  def mt2cpp = "montithings.generators:montithings2cpp:$version"
  def genSrcDir = "$buildDir/generated-sources"

  dependsOn configurations.mt_rte
  from {
    configurations.mt_rte.collect {zipTree(it)}
  }
  into genSrcDir

  dependsOn configurations.mt_libs
  from {
    configurations.mt_libs.collect {zipTree(it)}
  }
  into "$genSrcDir/lib"

  dependsOn configurations.mt_headers
  from {
    configurations.mt_headers.collect {zipTree(it)}
  }
  into "$genSrcDir/header"
}

task groovyTask(type:GroovyTask) {
  baseClass = "montithings.generator.codegen.MontiThingsGeneratorScript"
  outputDir = file "$buildDir/generated-sources"
  modelPath(
    file("$projectDir/src/main/resources/models")
  )
  handcodedPath(
    file("$projectDir/src/main/resources/hwc")
  )
  script = "montithings/generator/maagenerator.groovy"
}