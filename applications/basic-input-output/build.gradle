/* (c) https://github.com/MontiCore/monticore */

import de.se_rwth.commons.logging.Finding
import de.se_rwth.commons.logging.Log

import java.security.Permission
import java.util.stream.Collectors

buildscript {
  dependencies {
    classpath "montithings.generators:montithings2cpp:$version"
    classpath "de.monticore:monticore-runtime:$monticore_version"
  }
}


plugins {
  id "monticore" version "$monticore_version"
}

group = "montithings.applications"

sourceSets {
  main {
    allSource.srcDirs += ["$buildDir/generated-sources"]
  }
}

configurations {
  mt_rte
  mt_libs
  mt_headers
  mt_rte_tests
  mt_libs_tests
  mt_headers_tests
  mt_tests
}

dependencies {
  mt_rte ("montithings.generators:montithings2cpp:$version") {  
    capabilities {
     requireCapability("montithings.generators:montithings2cpp-$montithings_rte_classifier")
    }
    transitive = false
  }
  mt_libs ("montithings.generators:montithings2cpp:$version") {
    capabilities {
      requireCapability("montithings.generators:montithings2cpp-$montithings_libs_classifier")
    }
    transitive = false
  }
  mt_headers ("montithings.generators:montithings2cpp:$version") {
    capabilities {
      requireCapability("montithings.generators:montithings2cpp-$montithings_headers_classifier")
    }
    transitive = false
  }
  mt_rte_tests ("montithings.generators:montithings2cpp:$version") {
    capabilities {
      requireCapability("montithings.generators:montithings2cpp-$montithings_rte_classifier")
    }
    transitive = false
  }
  mt_libs_tests ("montithings.generators:montithings2cpp:$version") {
    capabilities {
      requireCapability("montithings.generators:montithings2cpp-$montithings_libs_classifier")
    }
    transitive = false
  }
  mt_headers_tests ("montithings.generators:montithings2cpp:$version") {
    capabilities {
      requireCapability("montithings.generators:montithings2cpp-$montithings_headers_classifier")
    }
    transitive = false
  }
  mt_tests ("montithings.generators:montithings2cpp:$version") {
    capabilities {
      requireCapability("montithings.generators:montithings2cpp-$montithings_tests_classifier")
    }
    transitive = false
  }

  implementation "de.se_rwth.commons:se-commons-groovy:$se_commons_version"
  implementation "montithings.generators:cd2cpp:$version"
  implementation "montithings.generators:montithings2cpp:$version"
  runtimeOnly "ch.qos.logback:logback-classic:$logback_version"
  //testImplementation "junit:junit:$junit_version"
  //testImplementation "de.monticore:monticore-runtime:$monticore_version"
}

task unpackRte(type: Sync) {
  def genSrcDir = "$buildDir/generated-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_rte
  from configurations.mt_rte.collect { zipTree(it) }
  into "$genSrcDir"
}

task unpackLibs(type: Sync) {
  def genSrcDir = "$buildDir/generated-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_libs
  from configurations.mt_libs.collect { zipTree(it) }
  into "$genSrcDir/lib"
}

task unpackHeaders(type: Sync) {
  def genSrcDir = "$buildDir/generated-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_headers
  from configurations.mt_headers.collect { zipTree(it) }
  into "$genSrcDir/header"
}

task unpackRteTests(type: Sync) {
  def genTestDir = "$buildDir/generated-test-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_rte_tests
  from configurations.mt_rte_tests.collect { zipTree(it) }
  into genTestDir
}

task unpackLibsTests(type: Sync) {
  def genTestDir = "$buildDir/generated-test-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_libs_tests
  from configurations.mt_libs_tests.collect { zipTree(it) }
  into "$genTestDir/lib"
}

task unpackHeaderTests(type: Sync) {
  def genTestDir = "$buildDir/generated-test-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_headers_tests
  from configurations.mt_headers_tests.collect { zipTree(it) }
  into "$genTestDir/header"
}

task unpackTests(type: Sync) {
  def genTestDir = "$buildDir/generated-test-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_tests
  from configurations.mt_tests.collect { zipTree(it) }
  into "$genTestDir/test"
}

task groovyTask(type: GroovyTask) {
  
 
  doFirst{
    // workaround so delay system exit:
    System.setSecurityManager(new SecurityManager() {
      @Override public void checkExit(int status) {
        String error = Log.getFindings().stream().
                filter({f -> f.getType().equals(Finding.Type.ERROR)})
                .map({f -> f.getMsg()})
                .collect(Collectors.joining("\n"))
        ant.fail(error)
      }
      
      @Override public void checkPermission(Permission perm) {
        // Allow other activities by default
      }
    })
  }
  baseClass = "montithings.generator.codegen.MontiThingsGeneratorScript"
  
  outputDir = file "$buildDir/generated-sources"
  modelPath(
    file("$projectDir/src/main/resources/models")
  )
  handcodedPath(
    file("$projectDir/src/main/resources/hwc")
  )
  script = "montithings/generator/mtgenerator.groovy"
  arguments.put("mainComponent", "hierarchy.Example")
  arguments.put("out", "$buildDir/generated-sources")
  arguments.put("hwc", "$projectDir/src/main/resources/hwc")
}

unpackHeaders.mustRunAfter unpackRte
unpackLibs.mustRunAfter unpackRte
build.dependsOn unpackRte, unpackHeaders, unpackLibs, groovyTask
