/* (c) https://github.com/MontiCore/monticore */

plugins {
  id "monticore"
}

group = "montithings.applications"

sourceSets {
  main {
    allSource.srcDirs += ["$buildDir/generated-sources"]
  }
}

configurations {
  mt_rte
  mt_libs
  mt_headers
  mt_rte_tests
  mt_libs_tests
  mt_headers_tests
  mt_tests
}

dependencies {
  mt_rte ("montithings.generators:montithings2cpp:$version:$montithings_rte_classifier") {
    transitive = false
  }
  mt_libs ("montithings.generators:montithings2cpp:$version:$montithings_libs_classifier") {
    transitive = false
  }
  mt_headers ("montithings.generators:montithings2cpp:$version:$montithings_headers_classifier") {
    transitive = false
  }
  mt_rte_tests ("montithings.generators:montithings2cpp:$version:$montithings_rte_classifier") {
    transitive = false
  }
  mt_libs_tests ("montithings.generators:montithings2cpp:$version:$montithings_libs_classifier") {
    transitive = false
  }
  mt_headers_tests ("montithings.generators:montithings2cpp:$version:$montithings_headers_classifier") {
    transitive = false
  }
  mt_tests ("montithings.generators:montithings2cpp:$version:$montithings_tests_classifier") {
    transitive = false
  }

  implementation "de.se_rwth.commons:se-commons-groovy:$se_commons_version"
  implementation "de.monticore:monticore-runtime:$monticore_version"
  implementation "de.monticore:monticore-grammar:$monticore_version"
  implementation "de.monticore:monticore-generator:$monticore_version"
  implementation project(":generators:cd2cpp")
  implementation project(":generators:montithings2cpp")
  runtimeOnly "ch.qos.logback:logback-classic:$logback_version"
  testImplementation "junit:junit:$junit_version"
  testImplementation "de.monticore:monticore-runtime:$monticore_version"
}

task unpackRte(type: Sync) {
  def genSrcDir = "$buildDir/generated-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_rte
  from configurations.mt_rte.collect { zipTree(it) }
  into "$genSrcDir"
}

task unpackLibs(type: Sync) {
  def genSrcDir = "$buildDir/generated-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_libs
  from configurations.mt_libs.collect { zipTree(it) }
  into "$genSrcDir/lib"
}

task unpackHeaders(type: Sync) {
  def genSrcDir = "$buildDir/generated-sources"
  def genTestDir = "$buildDir/generated-test-sources"
  exclude 'META-INF', 'META-INF/**'

  dependsOn configurations.mt_headers
  from configurations.mt_headers.collect { zipTree(it) }
  into "$genSrcDir/header"

  dependsOn configurations.mt_rte_tests
  from {
    configurations.mt_rte_tests.collect { zipTree(it) }
  }
  into genTestDir

  dependsOn configurations.mt_libs_tests
  from {
    configurations.mt_libs_tests.collect { zipTree(it) }
  }
  into "$genTestDir/lib"

  dependsOn configurations.mt_headers_tests
  from {
    configurations.mt_headers_tests.collect { zipTree(it) }
  }
  into "$genTestDir/header"

  dependsOn configurations.mt_tests
  from {
    configurations.mt_tests.collect { zipTree(it) }
  }
  into "$genTestDir/test"
}

task groovyTask(type: GroovyTask) {
  baseClass = "montithings.generator.codegen.MontiThingsGeneratorScript"
  outputDir = file "$buildDir/generated-sources"
  modelPath(
    file("$projectDir/src/main/resources/models")
  )
  handcodedPath(
    file("$projectDir/src/main/resources/hwc")
  )
  script = "montithings/generator/mtgenerator.groovy"
}

unpackHeaders.mustRunAfter unpackRte
unpackLibs.mustRunAfter unpackRte
build.dependsOn unpackRte, unpackHeaders, unpackLibs, groovyTask
