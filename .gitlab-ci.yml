# (c) https://github.com/MontiCore/monticore

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository/
  key: "$CI_COMMIT_SHA" # Cache across branch and stage

stages:
  - build
  - test

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Xmx4096m -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-s settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true"
  DOCKER_DRIVER: overlay2
  SAST_DISABLED: "true"
  SAST_EXCLUDED_PATHS: "test, services, cereal, json, nngpp, message-types, cpp-httplib, easyloggingpp, sole, curl, rigtorp"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

.docker_build_template: &docker_build_definition
  stage: build
  variables:
    DOCKER_DRIVER: overlay2
  cache: { }
  tags:
    - shell
    - docker
    - node2

Docker Alpine:
  <<: *docker_build_definition
  script:
    - docker login -u sebot -p $sebot $CI_REGISTRY
    - docker build --network=host -t deployment-server .

 
# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
Validate Maven:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  stage: build
  script:
    - mvn -U $MAVEN_CLI_OPTS compile package -Dmaven.test.skip=true

# Run Unit Tests after build
.unit_test_template: &unit_test_definition
  stage: test
  coverage: '/\d+.\d+ \% covered/'
  script:
    - mvn $MAVEN_CLI_OPTS test package -Dexec.skip
  dependencies: 
    - Validate Maven #download artifacts from build
  needs: ["Validate Maven"]

Unit Test JDK 8:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  <<: *unit_test_definition
      
Unit Test JDK 11:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-11
  # We do not require JDK 11 support yet. We appreciate it though.
  allow_failure: true 
  <<: *unit_test_definition

Unit Test JDK 14:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-14
  # We do not require JDK 14 support yet. We appreciate it though.
  allow_failure: true
  <<: *unit_test_definition

Unit Test Amazon Corretto JDK 8:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-amazoncorretto-8
  # We do not require Amazon Corretto JDK support. We appreciate it though.
  allow_failure: true 
  <<: *unit_test_definition

