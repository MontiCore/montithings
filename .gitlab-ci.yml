# (c) https://github.com/MontiCore/monticore

# Cache downloaded dependencies and plugins between builds.
# To keep cache across branches add 'key: "$CI_JOB_NAME"'
cache:
  paths:
    - .m2/repository/
  key: "$CI_COMMIT_SHA" # Cache across branch and stage

stages:
  - build
  - test
  - generator-test
  - post-test
  - security
  - build-applications

variables:
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Xmx4096m -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
  # `installAtEnd` and `deployAtEnd`are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-s settings.xml --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true"
  DOCKER_DRIVER: overlay2
  SAST_DISABLED: "true"
  SAST_EXCLUDED_PATHS: "test, services, cereal, json, nngpp, message-types, cpp-httplib, easyloggingpp, sole, curl, rigtorp"

before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle

.docker_build_template: &docker_build_definition
  stage: build
  variables:
    DOCKER_DRIVER: overlay2
  cache: { }
  tags:
    - shell
    - docker
    - node2

Docker Alpine:
  <<: *docker_build_definition
  only:
    refs:
      - merge_requests
    changes:
      - docker/mtcmake/**/*
  script:
    - docker login -u sebot -p $sebot $CI_REGISTRY
    - cd docker/mtcmake 

    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx rm builder
    - docker buildx create --name builder --driver docker-container --use
    - docker buildx inspect --bootstrap

    - docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6 --output type=image,name=mtcmake -t $CI_REGISTRY_IMAGE/mtcmake:latest --push .

Docker DDS:
  <<: *docker_build_definition
  only:
    refs:
      - merge_requests
    changes:
      - docker/mtcmakedds/**/*
  script:
    - docker login -u sebot -p $sebot $CI_REGISTRY
    - cd docker/mtcmakedds

    - export DOCKER_CLI_EXPERIMENTAL=enabled
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx rm builder
    - docker buildx create --name builder --driver docker-container --use
    - docker buildx inspect --bootstrap

    - docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6 --output type=image,name=mtcmakedds -t $CI_REGISTRY_IMAGE/mtcmakedds:latest --push .

Docker OpenDDSDCPSInfoRepo:
  <<: *docker_build_definition
  only:
    refs:
     - merge_requests
    changes:
      - docker/openddsdcpsinforepo/**/*
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - cd docker/openddsdcpsinforepo
    - docker build -t $CI_REGISTRY_IMAGE/openddsdcpsinforepo .
    - docker push $CI_REGISTRY_IMAGE/openddsdcpsinforepo

Docker Recorder:
  <<: *docker_build_definition
  only:
    refs:
      - merge_requests
    changes:
      - services/recorder/**/*
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/recorder -f services/recorder/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/recorder


Docker Log Tracing:
  <<: *docker_build_definition
  only:
    refs:
      - merge_requests
    changes:
      - services/log-tracing/**/*
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/logtracer_middleware -f services/log-tracing/Dockerfile .
    - cd services/log-tracing/frontend
    - docker build -t $CI_REGISTRY_IMAGE/logtracer_frontend .
    - docker push $CI_REGISTRY_IMAGE/logtracer_middleware
    - docker push $CI_REGISTRY_IMAGE/logtracer_frontend

# This will only validate and compile stuff and run e.g. maven-enforcer-plugin.
# Because some enforcer rules might check dependency convergence and class duplications
# we use `test-compile` here instead of `validate`, so the correct classpath is picked up.
Validate Maven:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  stage: build
  script:
    - mvn -U $MAVEN_CLI_OPTS compile package -Dmaven.test.skip=true
  artifacts:
    paths:
      - generators/montithings2cpp/target/
      - languages/montithings/target/
      - applications
    expire_in: 1 week
    
Validate Gradle:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:6.7-jdk8
  stage: build
  allow_failure: true
  artifacts:
    paths:
      - generators/cd2cpp/target/
      - generators/montithings2cpp/target/
      - languages/bindings/target/
      - languages/cdlangextension/target/
      - languages/error-handling/target/
      - languages/montiarc-extensions/target/
      - languages/monticore-extensions/target/
      - languages/montithings/target/
      - languages/mtconfig/target/
  script:
    - gradle clean assemble
    - cd applications
    - gradle clean assemble
    
Unit Test Gradle:
  image: registry.git.rwth-aachen.de/monticore/container-registry/gradle:6.7-jdk8
  stage: test
  allow_failure: true
  dependencies: 
    - Validate Gradle #download artifacts from build
  needs: ["Validate Gradle"]
  script:
    - gradle test

# Run Unit Tests after build
.unit_test_template: &unit_test_definition
  stage: test
  coverage: '/\d+.\d+ \% covered/'
  script:
    - mvn $MAVEN_CLI_OPTS test package -Dexec.skip
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, "instructions covered"; print 100*covered/instructions, "% covered" }' ./languages/montithings/target/site/jacoco/jacoco.csv
  dependencies: 
    - Validate Maven #download artifacts from build
  needs: ["Validate Maven"]
  artifacts:
    reports:
      junit:
      - ./generators/montithings2cpp/target/surefire-reports/TEST-*.xml
      - ./languages/montithings/target/surefire-reports/TEST-*.xml
    paths:
      - generators/montithings2cpp/target/
      - "applications/**/target/generated-sources"

Unit Test JDK 8:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  <<: *unit_test_definition
      
Unit Test JDK 11:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-11
  # We do not require JDK 11 support yet. We appreciate it though.
  allow_failure: true 
  <<: *unit_test_definition

Unit Test JDK 14:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-14
  # We do not require JDK 14 support yet. We appreciate it though.
  allow_failure: true
  <<: *unit_test_definition

Unit Test Amazon Corretto JDK 8:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-amazoncorretto-8
  # We do not require Amazon Corretto JDK support. We appreciate it though.
  allow_failure: true 
  <<: *unit_test_definition

.generator_test_definition: &generator_test_definition
  stage: generator-test
  dependencies: 
    - Unit Test JDK 11 #download generated-test-sources
  needs: ["Unit Test JDK 11"] # can run immediately after Unit Test JDK 11
  script:
    - cd generators/montithings2cpp/target/generated-test-sources
    - ./runTests.sh

Generator Test Alpine:
  image: $CI_REGISTRY_IMAGE/mtcmake
  <<: *generator_test_definition

Generator Test DDS:
  image: $CI_REGISTRY_IMAGE/mtcmakedds
  <<: *generator_test_definition

Compile Applications:
  image: $CI_REGISTRY_IMAGE/mtcmake
  stage: generator-test
  dependencies:
    - Unit Test JDK 11 #download generated-test-sources
  needs: [ "Unit Test JDK 11" ] # can run immediately after Unit Test JDK 11
  script:
    - cd applications
    - ./compile.sh

Deploy Nexus:
  image: registry.git.rwth-aachen.de/monticore/container-registry/maven:3-jdk-8
  stage: post-test
  script:
    - mvn -U $MAVEN_CLI_OPTS clean deploy -Dexec.skip -Dmaven.test.skip=true 
  only:
    - develop

Code Quality:
  stage: post-test
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  cache: {}
  needs: [] # can run immediately 
  retry: 2
  tags:
    - shell
    - docker
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    # Update Codeclimate and SonarJava Plugin
    - docker run  --rm 
      --env CODECLIMATE_CODE="$PWD" 
      --env CONTAINER_TIMEOUT_SECONDS=150000 
      --volume "$PWD":/code 
      --volume /var/run/docker.sock:/var/run/docker.sock 
      --volume /tmp/cc:/tmp/cc 
      codeclimate/codeclimate engines:install
    # Check Code Quality
    - docker run --rm 
       --env CODECLIMATE_CODE="$PWD" 
       --env CONTAINER_TIMEOUT_SECONDS=150000 
       --volume "$PWD":/code 
       --volume /var/run/docker.sock:/var/run/docker.sock 
       --volume /tmp/cc:/tmp/cc 
       codeclimate/codeclimate analyze -f json > codeclimate.json
        #"registry.gitlab.com/gitlab-org/security-products/codequality:$SP_VERSION" /code
  artifacts:
    reports:
      codequality: codeclimate.json

#Docker Applications:
#  stage: build-applications
#  dependencies: 
#    - Validate Maven #download artifacts from build
#  variables:
#    DOCKER_DRIVER: overlay2
#  cache: {}
#  tags:
#    - shell
#    - docker
#  only:
#    - develop
#  script:
#    - docker login -u sebot -p $sebot $CI_REGISTRY
#    - export DOCKER_CLI_EXPERIMENTAL=enabled
#    - docker run --rm --privileged docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
#    - docker buildx rm builder
#    - docker buildx create --name builder --driver docker-container --use
#    - docker buildx inspect --bootstrap
#    - bash buildapplications.sh

##########################################
# Security Jobs
##########################################

include:
- template: Security/Secret-Detection.gitlab-ci.yml
- template: Security/SAST.gitlab-ci.yml

# Check there are no secrets in the projects
secret_detection:
  stage: security
  needs: [] # can run immediately 

# Check RTE for security flaws
flawfinder-sast: 
  stage: security
  needs: [] # can run immediately 
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - '**/*.c'
        - '**/*.cpp'


##########################################
# Trigger other projects' pipelines
##########################################

trigger-hierarchy:
  stage: build-applications
  trigger:
    project: monticore/montithings/applications/hierarchy
    branch: master
  only:
    - develop

trigger-smart-home:
  stage: build-applications
  trigger:
    project: monticore/montithings/applications/smart-home
    branch: development
  only:
    - develop
