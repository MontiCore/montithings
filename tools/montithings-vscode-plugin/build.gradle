/* (c) https://github.com/MontiCore/monticore */
plugins{
    id 'de.monticore.language-server' version '7.0.0.13-SNAPSHOT'
    id "com.github.node-gradle.node" version "3.0.1"
    id "base"
}

import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

def genPostfix = "generated-source/mclsg/montithings-vscode-plugin"
def relGenDir = "target/$genPostfix" // Used since GeneratorSetup can not handle absolute paths
def genDir = "$buildDir/$genPostfix"

dependencies {
    lspserver project(path: ":montithings-language-server", configuration: 'shadow')
}

mclsg{
    languageName "MontiThings"
    outputDir relGenDir
    fileExtension 'mt'
}

task copyLspserver(type: Copy) {
    from configurations.lspserver
    into "$genDir/bin"
}

// Edit package.json of the generated project
task editPackageJson() {
    doLast {
        def file = new File("$genDir/package.json")
        def json = new JsonBuilder(new JsonSlurper().parse(file))
        json.content.version = "7.0.2"
        json.content.publisher = "MontiThings"
        json.content.name = "MontiThings"
        json.content.icon = "mt_logo.png"
        //json.content.newField = "This is a test to add a new field to the json"

        def iconThemesMap = [
                "id": "monti-icon-theme",
                "label": "default",
                "path": "./fileicons/monti-icon-theme.json"
        ]
        json.content.contributes.iconThemes = [iconThemesMap]

        file.write(json.toPrettyString())
    }

    task buildPlugin(type: NpmTask) {
        args = ['run', 'package']
    }

    task copyIcon(type: Copy) {
        from "$projectDir"
        include "mt_logo.png"
        into("$genDir")
    }

    task copyFileIcons(type: Copy) {
        from "$projectDir"
        include "fileIcons/**"
        into layout.buildDirectory.dir("$genDir")
    }

    task runVscodePlugin(type: Exec) {
        workingDir "$projectDir"
        commandLine "code", "--extensionDevelopmentPath=$genDir", "$projectDir/example/"
    }

    // Build vscode plugin
    node {
        download = true
        nodeProjectDir = file("$genDir")
    }
    tasks.build.dependsOn 'buildPlugin'
    tasks.buildPlugin.dependsOn 'copyLspserver'
    tasks.buildPlugin.dependsOn 'npm_install'
    tasks.buildPlugin.dependsOn 'generateVscodePlugin'
    tasks.buildPlugin.dependsOn 'editPackageJson'
    tasks.editPackageJson.dependsOn 'generateVscodePlugin'
    tasks.editPackageJson.dependsOn 'copyIcon'
    tasks.editPackageJson.dependsOn 'copyFileIcons'
    tasks.runVscodePlugin.dependsOn 'build'
}
